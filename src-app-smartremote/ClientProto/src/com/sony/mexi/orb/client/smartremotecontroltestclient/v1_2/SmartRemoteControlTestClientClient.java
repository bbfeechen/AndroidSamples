/**
 * @file  SmartRemoteControlTestClientClient.java
 * @brief Generated by the OrbJavaClientGenerator 2.4.1
 * @date  Sat Dec 22 14:53:20 JST 2012
 *
 * Copyright 2012 Sony Corporation
 */
package com.sony.mexi.orb.client.smartremotecontroltestclient.v1_2;

import com.sony.mexi.orb.client.OrbAbstractClient;
import com.sony.mexi.webapi.MethodTypeHandler;
import com.sony.mexi.webapi.VersionHandler;
import com.sony.mexi.webapi.OpenHandler;

public class SmartRemoteControlTestClientClient
    implements com.sony.scalar.webapi.interfaces.client.srctestclient.v1_2.SmartRemoteControlTestClient {

    private OrbAbstractClient client;

    public SmartRemoteControlTestClientClient(OrbAbstractClient client) {
        assert (client != null);
        this.client = client;
    }

    @Override
    public int getVersions(VersionHandler handler) {
        return client.getVersions(handler);
    }

    @Override
    public int getMethodTypes(String version, MethodTypeHandler handler) {
        return client.getMethodTypes(version, handler);
    }

    public int open(OpenHandler handler) {
        return client.open(handler);
    }

    @Override
    public int actTakePicture(
            final com.sony.scalar.webapi.service.camera.v1_2.takepicture.ActTakePictureCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "actTakePicture",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int actTakePictureByTouch(
            double x,
            double y,
            final com.sony.scalar.webapi.service.camera.v1_2.takepicture.ActTakePictureCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsNumber(x));
        params.add(new com.sony.mexi.json.JsNumber(y));

        e = client.call(
                "actTakePictureByTouch",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int awaitTakePicture(
            final com.sony.scalar.webapi.service.camera.v1_2.takepicture.AwaitTakePictureCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "awaitTakePicture",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int cancelTouchAFPosition(
            final com.sony.scalar.webapi.service.camera.v1_2.touchafposition.CancelTouchAFPositionCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 0) {

                        callbacks.returnCb();
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "cancelTouchAFPosition",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getAELock(
            final com.sony.scalar.webapi.service.camera.v1_2.aelock.GetAELockCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaBoolean());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getAELock",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getApplicationInfo(
            final com.sony.scalar.webapi.service.camera.v1_2.misc.GetApplicationInfoCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 2) {

                        callbacks.returnCb(
                            params.get(0).toJavaString(),
                            params.get(1).toJavaString());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getApplicationInfo",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getAvailableAELock(
            final com.sony.scalar.webapi.service.camera.v1_2.aelock.GetAvailableAELockCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 2) {

                        callbacks.returnCb(
                            params.get(0).toJavaBoolean(),
                            params.get(1).toJavaBooleanArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getAvailableAELock",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getAvailableApiList(
            final com.sony.scalar.webapi.service.camera.v1_2.misc.GetAvailableApiListCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getAvailableApiList",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getAvailableBracketShootMode(
            final com.sony.scalar.webapi.service.camera.v1_2.bracketshootmode.GetAvailableBracketShootModeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 2) {
                        com.sony.scalar.webapi.service.camera.v1_2.common.struct.BracketShootModeParams javaObject0 = null;
                        if (params.get(0) instanceof com.sony.mexi.json.JsObject) {
                            javaObject0 = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.BracketShootModeParams();
                            com.sony.mexi.json.JsObject jsObject0 = (com.sony.mexi.json.JsObject) params.get(0);
                            com.sony.mexi.json.JsValue bracketShootModeVal = jsObject0.get("bracketShootMode");
                            if (bracketShootModeVal != null && bracketShootModeVal.isString()) {
                                javaObject0.bracketShootMode = bracketShootModeVal.toJavaString();
                            }
                            com.sony.mexi.json.JsValue bracketShootModeOptionVal = jsObject0.get("bracketShootModeOption");
                            if (bracketShootModeOptionVal != null && bracketShootModeOptionVal.isString()) {
                                javaObject0.bracketShootModeOption = bracketShootModeOptionVal.toJavaString();
                            }
                        }
                        com.sony.scalar.webapi.service.camera.v1_2.common.struct.BracketShootModeParamCandidate[] javaObject1 = null;
                        if (params.get(1) instanceof com.sony.mexi.json.JsArray) {
                            com.sony.mexi.json.JsArray jsArray1 = (com.sony.mexi.json.JsArray) params.get(1);
                            javaObject1 = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.BracketShootModeParamCandidate[jsArray1.length()];
                            for (int i = 0; i < jsArray1.length(); i++) {
                                com.sony.scalar.webapi.service.camera.v1_2.common.struct.BracketShootModeParamCandidate temp = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.BracketShootModeParamCandidate();
                                com.sony.mexi.json.JsObject jsObject1 = (com.sony.mexi.json.JsObject) jsArray1.get(i);
                                com.sony.mexi.json.JsValue bracketShootModeVal = jsObject1.get("bracketShootMode");
                                if (bracketShootModeVal != null && bracketShootModeVal.isString()) {
                                    temp.bracketShootMode = bracketShootModeVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue bracketShootModeOptionsVal = jsObject1.get("bracketShootModeOptions");
                                if (bracketShootModeOptionsVal != null && bracketShootModeOptionsVal.isStringArray()) {
                                    temp.bracketShootModeOptions = bracketShootModeOptionsVal.toJavaStringArray();
                                }
                                javaObject1[i] = temp;
                            }
                        }

                        callbacks.returnCb(
                            javaObject0,
                            javaObject1);
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getAvailableBracketShootMode",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getAvailableCreativeStyle(
            final com.sony.scalar.webapi.service.camera.v1_2.creativestyle.GetAvailableCreativeStyleCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 2) {
                        com.sony.scalar.webapi.service.camera.v1_2.common.struct.CreativeStyleParams javaObject0 = null;
                        if (params.get(0) instanceof com.sony.mexi.json.JsObject) {
                            javaObject0 = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.CreativeStyleParams();
                            com.sony.mexi.json.JsObject jsObject0 = (com.sony.mexi.json.JsObject) params.get(0);
                            com.sony.mexi.json.JsValue creativeStyleVal = jsObject0.get("creativeStyle");
                            if (creativeStyleVal != null && creativeStyleVal.isString()) {
                                javaObject0.creativeStyle = creativeStyleVal.toJavaString();
                            }
                            com.sony.mexi.json.JsValue creativeStyleContrastVal = jsObject0.get("creativeStyleContrast");
                            if (creativeStyleContrastVal != null && creativeStyleContrastVal.isInt()) {
                                javaObject0.creativeStyleContrast = creativeStyleContrastVal.toJavaInt();
                            }
                            com.sony.mexi.json.JsValue creativeStyleSaturationVal = jsObject0.get("creativeStyleSaturation");
                            if (creativeStyleSaturationVal != null && creativeStyleSaturationVal.isInt()) {
                                javaObject0.creativeStyleSaturation = creativeStyleSaturationVal.toJavaInt();
                            }
                            com.sony.mexi.json.JsValue creativeStyleSharpnessVal = jsObject0.get("creativeStyleSharpness");
                            if (creativeStyleSharpnessVal != null && creativeStyleSharpnessVal.isInt()) {
                                javaObject0.creativeStyleSharpness = creativeStyleSharpnessVal.toJavaInt();
                            }
                        }
                        com.sony.scalar.webapi.service.camera.v1_2.common.struct.CreativeStyleParamCandidate[] javaObject1 = null;
                        if (params.get(1) instanceof com.sony.mexi.json.JsArray) {
                            com.sony.mexi.json.JsArray jsArray1 = (com.sony.mexi.json.JsArray) params.get(1);
                            javaObject1 = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.CreativeStyleParamCandidate[jsArray1.length()];
                            for (int i = 0; i < jsArray1.length(); i++) {
                                com.sony.scalar.webapi.service.camera.v1_2.common.struct.CreativeStyleParamCandidate temp = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.CreativeStyleParamCandidate();
                                com.sony.mexi.json.JsObject jsObject1 = (com.sony.mexi.json.JsObject) jsArray1.get(i);
                                com.sony.mexi.json.JsValue creativeStyleVal = jsObject1.get("creativeStyle");
                                if (creativeStyleVal != null && creativeStyleVal.isString()) {
                                    temp.creativeStyle = creativeStyleVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue creativeStyleContrastRangeVal = jsObject1.get("creativeStyleContrastRange");
                                if (creativeStyleContrastRangeVal != null && creativeStyleContrastRangeVal.isIntArray()) {
                                    temp.creativeStyleContrastRange = creativeStyleContrastRangeVal.toJavaIntArray();
                                }
                                com.sony.mexi.json.JsValue creativeStyleSaturationRangeVal = jsObject1.get("creativeStyleSaturationRange");
                                if (creativeStyleSaturationRangeVal != null && creativeStyleSaturationRangeVal.isIntArray()) {
                                    temp.creativeStyleSaturationRange = creativeStyleSaturationRangeVal.toJavaIntArray();
                                }
                                com.sony.mexi.json.JsValue creativeStyleSharpnessRangeVal = jsObject1.get("creativeStyleSharpnessRange");
                                if (creativeStyleSharpnessRangeVal != null && creativeStyleSharpnessRangeVal.isIntArray()) {
                                    temp.creativeStyleSharpnessRange = creativeStyleSharpnessRangeVal.toJavaIntArray();
                                }
                                javaObject1[i] = temp;
                            }
                        }

                        callbacks.returnCb(
                            javaObject0,
                            javaObject1);
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getAvailableCreativeStyle",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getAvailableExposureCompensation(
            final com.sony.scalar.webapi.service.camera.v1_2.exposurecompensation.GetAvailableExposureCompensationCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 4) {

                        callbacks.returnCb(
                            params.get(0).toJavaInt(),
                            params.get(1).toJavaInt(),
                            params.get(2).toJavaInt(),
                            params.get(3).toJavaInt());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getAvailableExposureCompensation",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getAvailableExposureMode(
            final com.sony.scalar.webapi.service.camera.v1_2.exposuremode.GetAvailableExposureModeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 2) {

                        callbacks.returnCb(
                            params.get(0).toJavaString(),
                            params.get(1).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getAvailableExposureMode",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getAvailableFNumber(
            final com.sony.scalar.webapi.service.camera.v1_2.fnumber.GetAvailableFNumberCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 2) {

                        callbacks.returnCb(
                            params.get(0).toJavaString(),
                            params.get(1).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getAvailableFNumber",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getAvailableFocusMode(
            final com.sony.scalar.webapi.service.camera.v1_2.focusmode.GetAvailableFocusModeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 2) {

                        callbacks.returnCb(
                            params.get(0).toJavaString(),
                            params.get(1).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getAvailableFocusMode",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getAvailableIsoNumber(
            final com.sony.scalar.webapi.service.camera.v1_2.isonumber.GetAvailableIsoNumberCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 2) {

                        callbacks.returnCb(
                            params.get(0).toJavaString(),
                            params.get(1).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getAvailableIsoNumber",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getAvailableLiveviewSize(
            final com.sony.scalar.webapi.service.camera.v1_2.liveview.GetAvailableLiveviewSizeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 2) {

                        callbacks.returnCb(
                            params.get(0).toJavaString(),
                            params.get(1).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getAvailableLiveviewSize",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getAvailablePictureEffect(
            final com.sony.scalar.webapi.service.camera.v1_2.pictureeffect.GetAvailablePictureEffectCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 2) {
                        com.sony.scalar.webapi.service.camera.v1_2.common.struct.PictureEffectParams javaObject0 = null;
                        if (params.get(0) instanceof com.sony.mexi.json.JsObject) {
                            javaObject0 = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.PictureEffectParams();
                            com.sony.mexi.json.JsObject jsObject0 = (com.sony.mexi.json.JsObject) params.get(0);
                            com.sony.mexi.json.JsValue pictureEffectVal = jsObject0.get("pictureEffect");
                            if (pictureEffectVal != null && pictureEffectVal.isString()) {
                                javaObject0.pictureEffect = pictureEffectVal.toJavaString();
                            }
                            com.sony.mexi.json.JsValue pictureEffectOptionVal = jsObject0.get("pictureEffectOption");
                            if (pictureEffectOptionVal != null && pictureEffectOptionVal.isString()) {
                                javaObject0.pictureEffectOption = pictureEffectOptionVal.toJavaString();
                            }
                        }
                        com.sony.scalar.webapi.service.camera.v1_2.common.struct.PictureEffectParamCandidate[] javaObject1 = null;
                        if (params.get(1) instanceof com.sony.mexi.json.JsArray) {
                            com.sony.mexi.json.JsArray jsArray1 = (com.sony.mexi.json.JsArray) params.get(1);
                            javaObject1 = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.PictureEffectParamCandidate[jsArray1.length()];
                            for (int i = 0; i < jsArray1.length(); i++) {
                                com.sony.scalar.webapi.service.camera.v1_2.common.struct.PictureEffectParamCandidate temp = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.PictureEffectParamCandidate();
                                com.sony.mexi.json.JsObject jsObject1 = (com.sony.mexi.json.JsObject) jsArray1.get(i);
                                com.sony.mexi.json.JsValue pictureEffectVal = jsObject1.get("pictureEffect");
                                if (pictureEffectVal != null && pictureEffectVal.isString()) {
                                    temp.pictureEffect = pictureEffectVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue pictureEffectOptionsVal = jsObject1.get("pictureEffectOptions");
                                if (pictureEffectOptionsVal != null && pictureEffectOptionsVal.isStringArray()) {
                                    temp.pictureEffectOptions = pictureEffectOptionsVal.toJavaStringArray();
                                }
                                javaObject1[i] = temp;
                            }
                        }

                        callbacks.returnCb(
                            javaObject0,
                            javaObject1);
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getAvailablePictureEffect",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getAvailablePostviewImageSize(
            final com.sony.scalar.webapi.service.camera.v1_2.postviewimage.GetAvailablePostviewImageSizeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 2) {

                        callbacks.returnCb(
                            params.get(0).toJavaString(),
                            params.get(1).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getAvailablePostviewImageSize",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getAvailableSelfTimer(
            final com.sony.scalar.webapi.service.camera.v1_2.selftimer.GetAvailableSelfTimerCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 2) {

                        callbacks.returnCb(
                            params.get(0).toJavaInt(),
                            params.get(1).toJavaIntArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getAvailableSelfTimer",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getAvailableShutterSpeed(
            final com.sony.scalar.webapi.service.camera.v1_2.shutterspeed.GetAvailableShutterSpeedCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 2) {

                        callbacks.returnCb(
                            params.get(0).toJavaString(),
                            params.get(1).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getAvailableShutterSpeed",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getAvailableWhiteBalance(
            final com.sony.scalar.webapi.service.camera.v1_2.whitebalance.GetAvailableWhiteBalanceCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 2) {
                        com.sony.scalar.webapi.service.camera.v1_2.common.struct.WhiteBalanceParams javaObject0 = null;
                        if (params.get(0) instanceof com.sony.mexi.json.JsObject) {
                            javaObject0 = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.WhiteBalanceParams();
                            com.sony.mexi.json.JsObject jsObject0 = (com.sony.mexi.json.JsObject) params.get(0);
                            com.sony.mexi.json.JsValue whiteBalanceModeVal = jsObject0.get("whiteBalanceMode");
                            if (whiteBalanceModeVal != null && whiteBalanceModeVal.isString()) {
                                javaObject0.whiteBalanceMode = whiteBalanceModeVal.toJavaString();
                            }
                            com.sony.mexi.json.JsValue colorTemperatureVal = jsObject0.get("colorTemperature");
                            if (colorTemperatureVal != null && colorTemperatureVal.isInt()) {
                                javaObject0.colorTemperature = colorTemperatureVal.toJavaInt();
                            }
                        }
                        com.sony.scalar.webapi.service.camera.v1_2.common.struct.WhiteBalanceParamCandidate[] javaObject1 = null;
                        if (params.get(1) instanceof com.sony.mexi.json.JsArray) {
                            com.sony.mexi.json.JsArray jsArray1 = (com.sony.mexi.json.JsArray) params.get(1);
                            javaObject1 = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.WhiteBalanceParamCandidate[jsArray1.length()];
                            for (int i = 0; i < jsArray1.length(); i++) {
                                com.sony.scalar.webapi.service.camera.v1_2.common.struct.WhiteBalanceParamCandidate temp = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.WhiteBalanceParamCandidate();
                                com.sony.mexi.json.JsObject jsObject1 = (com.sony.mexi.json.JsObject) jsArray1.get(i);
                                com.sony.mexi.json.JsValue whiteBalanceModeVal = jsObject1.get("whiteBalanceMode");
                                if (whiteBalanceModeVal != null && whiteBalanceModeVal.isString()) {
                                    temp.whiteBalanceMode = whiteBalanceModeVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue colorTemperatureRangeVal = jsObject1.get("colorTemperatureRange");
                                if (colorTemperatureRangeVal != null && colorTemperatureRangeVal.isIntArray()) {
                                    temp.colorTemperatureRange = colorTemperatureRangeVal.toJavaIntArray();
                                }
                                javaObject1[i] = temp;
                            }
                        }

                        callbacks.returnCb(
                            javaObject0,
                            javaObject1);
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getAvailableWhiteBalance",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getBracketShootMode(
            final com.sony.scalar.webapi.service.camera.v1_2.bracketshootmode.GetBracketShootModeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {
                        com.sony.scalar.webapi.service.camera.v1_2.common.struct.BracketShootModeParams javaObject0 = null;
                        if (params.get(0) instanceof com.sony.mexi.json.JsObject) {
                            javaObject0 = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.BracketShootModeParams();
                            com.sony.mexi.json.JsObject jsObject0 = (com.sony.mexi.json.JsObject) params.get(0);
                            com.sony.mexi.json.JsValue bracketShootModeVal = jsObject0.get("bracketShootMode");
                            if (bracketShootModeVal != null && bracketShootModeVal.isString()) {
                                javaObject0.bracketShootMode = bracketShootModeVal.toJavaString();
                            }
                            com.sony.mexi.json.JsValue bracketShootModeOptionVal = jsObject0.get("bracketShootModeOption");
                            if (bracketShootModeOptionVal != null && bracketShootModeOptionVal.isString()) {
                                javaObject0.bracketShootModeOption = bracketShootModeOptionVal.toJavaString();
                            }
                        }

                        callbacks.returnCb(
                            javaObject0);
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getBracketShootMode",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getCreativeStyle(
            final com.sony.scalar.webapi.service.camera.v1_2.creativestyle.GetCreativeStyleCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {
                        com.sony.scalar.webapi.service.camera.v1_2.common.struct.CreativeStyleParams javaObject0 = null;
                        if (params.get(0) instanceof com.sony.mexi.json.JsObject) {
                            javaObject0 = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.CreativeStyleParams();
                            com.sony.mexi.json.JsObject jsObject0 = (com.sony.mexi.json.JsObject) params.get(0);
                            com.sony.mexi.json.JsValue creativeStyleVal = jsObject0.get("creativeStyle");
                            if (creativeStyleVal != null && creativeStyleVal.isString()) {
                                javaObject0.creativeStyle = creativeStyleVal.toJavaString();
                            }
                            com.sony.mexi.json.JsValue creativeStyleContrastVal = jsObject0.get("creativeStyleContrast");
                            if (creativeStyleContrastVal != null && creativeStyleContrastVal.isInt()) {
                                javaObject0.creativeStyleContrast = creativeStyleContrastVal.toJavaInt();
                            }
                            com.sony.mexi.json.JsValue creativeStyleSaturationVal = jsObject0.get("creativeStyleSaturation");
                            if (creativeStyleSaturationVal != null && creativeStyleSaturationVal.isInt()) {
                                javaObject0.creativeStyleSaturation = creativeStyleSaturationVal.toJavaInt();
                            }
                            com.sony.mexi.json.JsValue creativeStyleSharpnessVal = jsObject0.get("creativeStyleSharpness");
                            if (creativeStyleSharpnessVal != null && creativeStyleSharpnessVal.isInt()) {
                                javaObject0.creativeStyleSharpness = creativeStyleSharpnessVal.toJavaInt();
                            }
                        }

                        callbacks.returnCb(
                            javaObject0);
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getCreativeStyle",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getEvent(
            boolean polling,
            final com.sony.scalar.webapi.service.camera.v1_2.getevent.GetEventCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {
                        com.sony.scalar.webapi.service.camera.v1_2.common.struct.GetEventParams[] javaObject0 = null;
                        if (params.get(0) instanceof com.sony.mexi.json.JsArray) {
                            com.sony.mexi.json.JsArray jsArray0 = (com.sony.mexi.json.JsArray) params.get(0);
                            javaObject0 = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.GetEventParams[jsArray0.length()];
                            for (int i = 0; i < jsArray0.length(); i++) {
                                com.sony.scalar.webapi.service.camera.v1_2.common.struct.GetEventParams temp = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.GetEventParams();
                                com.sony.mexi.json.JsObject jsObject0 = (com.sony.mexi.json.JsObject) jsArray0.get(i);
                                com.sony.mexi.json.JsValue typeVal = jsObject0.get("type");
                                if (typeVal != null && typeVal.isString()) {
                                    temp.type = typeVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue checkAvailabilityVal = jsObject0.get("checkAvailability");
                                if (checkAvailabilityVal != null && checkAvailabilityVal.isBoolean()) {
                                    temp.checkAvailability = checkAvailabilityVal.toJavaBoolean();
                                }
                                com.sony.mexi.json.JsValue currentSelfTimerVal = jsObject0.get("currentSelfTimer");
                                if (currentSelfTimerVal != null && currentSelfTimerVal.isInt()) {
                                    temp.currentSelfTimer = currentSelfTimerVal.toJavaInt();
                                }
                                com.sony.mexi.json.JsValue selfTimerCandidatesVal = jsObject0.get("selfTimerCandidates");
                                if (selfTimerCandidatesVal != null && selfTimerCandidatesVal.isIntArray()) {
                                    temp.selfTimerCandidates = selfTimerCandidatesVal.toJavaIntArray();
                                }
                                com.sony.mexi.json.JsValue currentExposureCompensationVal = jsObject0.get("currentExposureCompensation");
                                if (currentExposureCompensationVal != null && currentExposureCompensationVal.isInt()) {
                                    temp.currentExposureCompensation = currentExposureCompensationVal.toJavaInt();
                                }
                                com.sony.mexi.json.JsValue maxExposureCompensationVal = jsObject0.get("maxExposureCompensation");
                                if (maxExposureCompensationVal != null && maxExposureCompensationVal.isInt()) {
                                    temp.maxExposureCompensation = maxExposureCompensationVal.toJavaInt();
                                }
                                com.sony.mexi.json.JsValue minExposureCompensationVal = jsObject0.get("minExposureCompensation");
                                if (minExposureCompensationVal != null && minExposureCompensationVal.isInt()) {
                                    temp.minExposureCompensation = minExposureCompensationVal.toJavaInt();
                                }
                                com.sony.mexi.json.JsValue stepIndexOfExposureCompensationVal = jsObject0.get("stepIndexOfExposureCompensation");
                                if (stepIndexOfExposureCompensationVal != null && stepIndexOfExposureCompensationVal.isInt()) {
                                    temp.stepIndexOfExposureCompensation = stepIndexOfExposureCompensationVal.toJavaInt();
                                }
                                com.sony.mexi.json.JsValue currentAeLockVal = jsObject0.get("currentAeLock");
                                if (currentAeLockVal != null && currentAeLockVal.isBoolean()) {
                                    temp.currentAeLock = currentAeLockVal.toJavaBoolean();
                                }
                                com.sony.mexi.json.JsValue aeLockCandidatesVal = jsObject0.get("aeLockCandidates");
                                if (aeLockCandidatesVal != null && aeLockCandidatesVal.isBooleanArray()) {
                                    temp.aeLockCandidates = aeLockCandidatesVal.toJavaBooleanArray();
                                }
                                com.sony.mexi.json.JsValue currentBracketShootModeVal = jsObject0.get("currentBracketShootMode");
                                if (currentBracketShootModeVal != null && currentBracketShootModeVal.isString()) {
                                    temp.currentBracketShootMode = currentBracketShootModeVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue currentBracketShootModeOptionVal = jsObject0.get("currentBracketShootModeOption");
                                if (currentBracketShootModeOptionVal != null && currentBracketShootModeOptionVal.isString()) {
                                    temp.currentBracketShootModeOption = currentBracketShootModeOptionVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue currentCreativeStyleVal = jsObject0.get("currentCreativeStyle");
                                if (currentCreativeStyleVal != null && currentCreativeStyleVal.isString()) {
                                    temp.currentCreativeStyle = currentCreativeStyleVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue currentCreativeStyleContrastVal = jsObject0.get("currentCreativeStyleContrast");
                                if (currentCreativeStyleContrastVal != null && currentCreativeStyleContrastVal.isInt()) {
                                    temp.currentCreativeStyleContrast = currentCreativeStyleContrastVal.toJavaInt();
                                }
                                com.sony.mexi.json.JsValue currentCreativeStyleSaturationVal = jsObject0.get("currentCreativeStyleSaturation");
                                if (currentCreativeStyleSaturationVal != null && currentCreativeStyleSaturationVal.isInt()) {
                                    temp.currentCreativeStyleSaturation = currentCreativeStyleSaturationVal.toJavaInt();
                                }
                                com.sony.mexi.json.JsValue currentCreativeStyleSharpnessVal = jsObject0.get("currentCreativeStyleSharpness");
                                if (currentCreativeStyleSharpnessVal != null && currentCreativeStyleSharpnessVal.isInt()) {
                                    temp.currentCreativeStyleSharpness = currentCreativeStyleSharpnessVal.toJavaInt();
                                }
                                com.sony.mexi.json.JsValue currentExposureModeVal = jsObject0.get("currentExposureMode");
                                if (currentExposureModeVal != null && currentExposureModeVal.isString()) {
                                    temp.currentExposureMode = currentExposureModeVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue exposureModeCandidatesVal = jsObject0.get("exposureModeCandidates");
                                if (exposureModeCandidatesVal != null && exposureModeCandidatesVal.isStringArray()) {
                                    temp.exposureModeCandidates = exposureModeCandidatesVal.toJavaStringArray();
                                }
                                com.sony.mexi.json.JsValue currentFNumberVal = jsObject0.get("currentFNumber");
                                if (currentFNumberVal != null && currentFNumberVal.isString()) {
                                    temp.currentFNumber = currentFNumberVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue fNumberCandidatesVal = jsObject0.get("fNumberCandidates");
                                if (fNumberCandidatesVal != null && fNumberCandidatesVal.isStringArray()) {
                                    temp.fNumberCandidates = fNumberCandidatesVal.toJavaStringArray();
                                }
                                com.sony.mexi.json.JsValue currentFocusModeVal = jsObject0.get("currentFocusMode");
                                if (currentFocusModeVal != null && currentFocusModeVal.isString()) {
                                    temp.currentFocusMode = currentFocusModeVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue focusModeCandidatesVal = jsObject0.get("focusModeCandidates");
                                if (focusModeCandidatesVal != null && focusModeCandidatesVal.isStringArray()) {
                                    temp.focusModeCandidates = focusModeCandidatesVal.toJavaStringArray();
                                }
                                com.sony.mexi.json.JsValue currentIsoVal = jsObject0.get("currentIso");
                                if (currentIsoVal != null && currentIsoVal.isString()) {
                                    temp.currentIso = currentIsoVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue isoCandidatesVal = jsObject0.get("isoCandidates");
                                if (isoCandidatesVal != null && isoCandidatesVal.isStringArray()) {
                                    temp.isoCandidates = isoCandidatesVal.toJavaStringArray();
                                }
                                com.sony.mexi.json.JsValue currentPictureEffectVal = jsObject0.get("currentPictureEffect");
                                if (currentPictureEffectVal != null && currentPictureEffectVal.isString()) {
                                    temp.currentPictureEffect = currentPictureEffectVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue currentPictureEffectOptionVal = jsObject0.get("currentPictureEffectOption");
                                if (currentPictureEffectOptionVal != null && currentPictureEffectOptionVal.isString()) {
                                    temp.currentPictureEffectOption = currentPictureEffectOptionVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue currentShutterSpeedVal = jsObject0.get("currentShutterSpeed");
                                if (currentShutterSpeedVal != null && currentShutterSpeedVal.isString()) {
                                    temp.currentShutterSpeed = currentShutterSpeedVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue shutterSpeedCandidatesVal = jsObject0.get("shutterSpeedCandidates");
                                if (shutterSpeedCandidatesVal != null && shutterSpeedCandidatesVal.isStringArray()) {
                                    temp.shutterSpeedCandidates = shutterSpeedCandidatesVal.toJavaStringArray();
                                }
                                com.sony.mexi.json.JsValue currentWhiteBalanceModeVal = jsObject0.get("currentWhiteBalanceMode");
                                if (currentWhiteBalanceModeVal != null && currentWhiteBalanceModeVal.isString()) {
                                    temp.currentWhiteBalanceMode = currentWhiteBalanceModeVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue currentColorTemperatureVal = jsObject0.get("currentColorTemperature");
                                if (currentColorTemperatureVal != null && currentColorTemperatureVal.isInt()) {
                                    temp.currentColorTemperature = currentColorTemperatureVal.toJavaInt();
                                }
                                com.sony.mexi.json.JsValue currentCameraStatusVal = jsObject0.get("currentCameraStatus");
                                if (currentCameraStatusVal != null && currentCameraStatusVal.isString()) {
                                    temp.currentCameraStatus = currentCameraStatusVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue fatalErrorStatusVal = jsObject0.get("fatalErrorStatus");
                                if (fatalErrorStatusVal != null && fatalErrorStatusVal.isString()) {
                                    temp.fatalErrorStatus = fatalErrorStatusVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue mediaRecoveryErrorStatusVal = jsObject0.get("mediaRecoveryErrorStatus");
                                if (mediaRecoveryErrorStatusVal != null && mediaRecoveryErrorStatusVal.isString()) {
                                    temp.mediaRecoveryErrorStatus = mediaRecoveryErrorStatusVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue MediaTroubleErrorStatusVal = jsObject0.get("MediaTroubleErrorStatus");
                                if (MediaTroubleErrorStatusVal != null && MediaTroubleErrorStatusVal.isString()) {
                                    temp.MediaTroubleErrorStatus = MediaTroubleErrorStatusVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue LowBatteryErrorStatusVal = jsObject0.get("LowBatteryErrorStatus");
                                if (LowBatteryErrorStatusVal != null && LowBatteryErrorStatusVal.isString()) {
                                    temp.LowBatteryErrorStatus = LowBatteryErrorStatusVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue NoMediaErrorStatusVal = jsObject0.get("NoMediaErrorStatus");
                                if (NoMediaErrorStatusVal != null && NoMediaErrorStatusVal.isString()) {
                                    temp.NoMediaErrorStatus = NoMediaErrorStatusVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue BatteryTroubleErrorStatusVal = jsObject0.get("BatteryTroubleErrorStatus");
                                if (BatteryTroubleErrorStatusVal != null && BatteryTroubleErrorStatusVal.isString()) {
                                    temp.BatteryTroubleErrorStatus = BatteryTroubleErrorStatusVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue ThermalErrorStatusVal = jsObject0.get("ThermalErrorStatus");
                                if (ThermalErrorStatusVal != null && ThermalErrorStatusVal.isString()) {
                                    temp.ThermalErrorStatus = ThermalErrorStatusVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue RecoveryFaildErrorStatusVal = jsObject0.get("RecoveryFaildErrorStatus");
                                if (RecoveryFaildErrorStatusVal != null && RecoveryFaildErrorStatusVal.isString()) {
                                    temp.RecoveryFaildErrorStatus = RecoveryFaildErrorStatusVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue CaptureImpossibleErrorStatusVal = jsObject0.get("CaptureImpossibleErrorStatus");
                                if (CaptureImpossibleErrorStatusVal != null && CaptureImpossibleErrorStatusVal.isString()) {
                                    temp.CaptureImpossibleErrorStatus = CaptureImpossibleErrorStatusVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue CaptureImpossibleNumverPossibleShotsErrorStatusVal = jsObject0.get("CaptureImpossibleNumverPossibleShotsErrorStatus");
                                if (CaptureImpossibleNumverPossibleShotsErrorStatusVal != null && CaptureImpossibleNumverPossibleShotsErrorStatusVal.isString()) {
                                    temp.CaptureImpossibleNumverPossibleShotsErrorStatus = CaptureImpossibleNumverPossibleShotsErrorStatusVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue CaptureImpossibleMediaFullErrorStatusVal = jsObject0.get("CaptureImpossibleMediaFullErrorStatus");
                                if (CaptureImpossibleMediaFullErrorStatusVal != null && CaptureImpossibleMediaFullErrorStatusVal.isString()) {
                                    temp.CaptureImpossibleMediaFullErrorStatus = CaptureImpossibleMediaFullErrorStatusVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue liveViewStatusVal = jsObject0.get("liveViewStatus");
                                if (liveViewStatusVal != null && liveViewStatusVal.isBoolean()) {
                                    temp.liveViewStatus = liveViewStatusVal.toJavaBoolean();
                                }
                                com.sony.mexi.json.JsValue zoomPositionVal = jsObject0.get("zoomPosition");
                                if (zoomPositionVal != null && zoomPositionVal.isInt()) {
                                    temp.zoomPosition = zoomPositionVal.toJavaInt();
                                }
                                com.sony.mexi.json.JsValue zoomNumberBoxVal = jsObject0.get("zoomNumberBox");
                                if (zoomNumberBoxVal != null && zoomNumberBoxVal.isInt()) {
                                    temp.zoomNumberBox = zoomNumberBoxVal.toJavaInt();
                                }
                                com.sony.mexi.json.JsValue zoomIndexCurrentBoxVal = jsObject0.get("zoomIndexCurrentBox");
                                if (zoomIndexCurrentBoxVal != null && zoomIndexCurrentBoxVal.isInt()) {
                                    temp.zoomIndexCurrentBox = zoomIndexCurrentBoxVal.toJavaInt();
                                }
                                com.sony.mexi.json.JsValue zoomPositionCurrentBoxVal = jsObject0.get("zoomPositionCurrentBox");
                                if (zoomPositionCurrentBoxVal != null && zoomPositionCurrentBoxVal.isInt()) {
                                    temp.zoomPositionCurrentBox = zoomPositionCurrentBoxVal.toJavaInt();
                                }
                                com.sony.mexi.json.JsValue sceneRecognitonVal = jsObject0.get("sceneRecogniton");
                                if (sceneRecognitonVal != null && sceneRecognitonVal.isString()) {
                                    temp.sceneRecogniton = sceneRecognitonVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue steadyRecognitonVal = jsObject0.get("steadyRecogniton");
                                if (steadyRecognitonVal != null && steadyRecognitonVal.isString()) {
                                    temp.steadyRecogniton = steadyRecognitonVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue motionRecognitonVal = jsObject0.get("motionRecogniton");
                                if (motionRecognitonVal != null && motionRecognitonVal.isString()) {
                                    temp.motionRecogniton = motionRecognitonVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue storedResultsVal = jsObject0.get("storedResults");
                                if (storedResultsVal != null && storedResultsVal.isBooleanArray()) {
                                    temp.storedResults = storedResultsVal.toJavaBooleanArray();
                                }
                                com.sony.mexi.json.JsValue originalsVal = jsObject0.get("originals");
                                if (originalsVal != null && originalsVal.isStringArray()) {
                                    temp.originals = originalsVal.toJavaStringArray();
                                }
                                com.sony.mexi.json.JsValue screenailsVal = jsObject0.get("screenails");
                                if (screenailsVal != null && screenailsVal.isStringArray()) {
                                    temp.screenails = screenailsVal.toJavaStringArray();
                                }
                                com.sony.mexi.json.JsValue thumbnailsVal = jsObject0.get("thumbnails");
                                if (thumbnailsVal != null && thumbnailsVal.isStringArray()) {
                                    temp.thumbnails = thumbnailsVal.toJavaStringArray();
                                }
                                com.sony.mexi.json.JsValue rawsVal = jsObject0.get("raws");
                                if (rawsVal != null && rawsVal.isStringArray()) {
                                    temp.raws = rawsVal.toJavaStringArray();
                                }
                                javaObject0[i] = temp;
                            }
                        }

                        callbacks.returnCb(
                            javaObject0);
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsBoolean(polling));

        e = client.call(
                "getEvent",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getExposureCompensation(
            final com.sony.scalar.webapi.service.camera.v1_2.exposurecompensation.GetExposureCompensationCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaInt());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getExposureCompensation",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getExposureMode(
            final com.sony.scalar.webapi.service.camera.v1_2.exposuremode.GetExposureModeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaString());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getExposureMode",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getFNumber(
            final com.sony.scalar.webapi.service.camera.v1_2.fnumber.GetFNumberCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaString());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getFNumber",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getFocusMode(
            final com.sony.scalar.webapi.service.camera.v1_2.focusmode.GetFocusModeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaString());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getFocusMode",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getIsoNumber(
            final com.sony.scalar.webapi.service.camera.v1_2.isonumber.GetIsoNumberCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaString());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getIsoNumber",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getLiveviewSize(
            final com.sony.scalar.webapi.service.camera.v1_2.liveview.GetLiveviewSizeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaString());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getLiveviewSize",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getPictureEffect(
            final com.sony.scalar.webapi.service.camera.v1_2.pictureeffect.GetPictureEffectCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {
                        com.sony.scalar.webapi.service.camera.v1_2.common.struct.PictureEffectParams javaObject0 = null;
                        if (params.get(0) instanceof com.sony.mexi.json.JsObject) {
                            javaObject0 = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.PictureEffectParams();
                            com.sony.mexi.json.JsObject jsObject0 = (com.sony.mexi.json.JsObject) params.get(0);
                            com.sony.mexi.json.JsValue pictureEffectVal = jsObject0.get("pictureEffect");
                            if (pictureEffectVal != null && pictureEffectVal.isString()) {
                                javaObject0.pictureEffect = pictureEffectVal.toJavaString();
                            }
                            com.sony.mexi.json.JsValue pictureEffectOptionVal = jsObject0.get("pictureEffectOption");
                            if (pictureEffectOptionVal != null && pictureEffectOptionVal.isString()) {
                                javaObject0.pictureEffectOption = pictureEffectOptionVal.toJavaString();
                            }
                        }

                        callbacks.returnCb(
                            javaObject0);
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getPictureEffect",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getPostviewImageSize(
            final com.sony.scalar.webapi.service.camera.v1_2.postviewimage.GetPostviewImageSizeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaString());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getPostviewImageSize",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getSelfTimer(
            final com.sony.scalar.webapi.service.camera.v1_2.selftimer.GetSelfTimerCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaInt());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getSelfTimer",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getShutterSpeed(
            final com.sony.scalar.webapi.service.camera.v1_2.shutterspeed.GetShutterSpeedCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaString());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getShutterSpeed",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getSupportedAELock(
            final com.sony.scalar.webapi.service.camera.v1_2.aelock.GetSupportedAELockCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaBooleanArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getSupportedAELock",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getSupportedBracketShootMode(
            final com.sony.scalar.webapi.service.camera.v1_2.bracketshootmode.GetSupportedBracketShootModeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {
                        com.sony.scalar.webapi.service.camera.v1_2.common.struct.BracketShootModeParamCandidate[] javaObject0 = null;
                        if (params.get(0) instanceof com.sony.mexi.json.JsArray) {
                            com.sony.mexi.json.JsArray jsArray0 = (com.sony.mexi.json.JsArray) params.get(0);
                            javaObject0 = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.BracketShootModeParamCandidate[jsArray0.length()];
                            for (int i = 0; i < jsArray0.length(); i++) {
                                com.sony.scalar.webapi.service.camera.v1_2.common.struct.BracketShootModeParamCandidate temp = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.BracketShootModeParamCandidate();
                                com.sony.mexi.json.JsObject jsObject0 = (com.sony.mexi.json.JsObject) jsArray0.get(i);
                                com.sony.mexi.json.JsValue bracketShootModeVal = jsObject0.get("bracketShootMode");
                                if (bracketShootModeVal != null && bracketShootModeVal.isString()) {
                                    temp.bracketShootMode = bracketShootModeVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue bracketShootModeOptionsVal = jsObject0.get("bracketShootModeOptions");
                                if (bracketShootModeOptionsVal != null && bracketShootModeOptionsVal.isStringArray()) {
                                    temp.bracketShootModeOptions = bracketShootModeOptionsVal.toJavaStringArray();
                                }
                                javaObject0[i] = temp;
                            }
                        }

                        callbacks.returnCb(
                            javaObject0);
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getSupportedBracketShootMode",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getSupportedCreativeStyle(
            final com.sony.scalar.webapi.service.camera.v1_2.creativestyle.GetSupportedCreativeStyleCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {
                        com.sony.scalar.webapi.service.camera.v1_2.common.struct.CreativeStyleParamCandidate[] javaObject0 = null;
                        if (params.get(0) instanceof com.sony.mexi.json.JsArray) {
                            com.sony.mexi.json.JsArray jsArray0 = (com.sony.mexi.json.JsArray) params.get(0);
                            javaObject0 = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.CreativeStyleParamCandidate[jsArray0.length()];
                            for (int i = 0; i < jsArray0.length(); i++) {
                                com.sony.scalar.webapi.service.camera.v1_2.common.struct.CreativeStyleParamCandidate temp = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.CreativeStyleParamCandidate();
                                com.sony.mexi.json.JsObject jsObject0 = (com.sony.mexi.json.JsObject) jsArray0.get(i);
                                com.sony.mexi.json.JsValue creativeStyleVal = jsObject0.get("creativeStyle");
                                if (creativeStyleVal != null && creativeStyleVal.isString()) {
                                    temp.creativeStyle = creativeStyleVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue creativeStyleContrastRangeVal = jsObject0.get("creativeStyleContrastRange");
                                if (creativeStyleContrastRangeVal != null && creativeStyleContrastRangeVal.isIntArray()) {
                                    temp.creativeStyleContrastRange = creativeStyleContrastRangeVal.toJavaIntArray();
                                }
                                com.sony.mexi.json.JsValue creativeStyleSaturationRangeVal = jsObject0.get("creativeStyleSaturationRange");
                                if (creativeStyleSaturationRangeVal != null && creativeStyleSaturationRangeVal.isIntArray()) {
                                    temp.creativeStyleSaturationRange = creativeStyleSaturationRangeVal.toJavaIntArray();
                                }
                                com.sony.mexi.json.JsValue creativeStyleSharpnessRangeVal = jsObject0.get("creativeStyleSharpnessRange");
                                if (creativeStyleSharpnessRangeVal != null && creativeStyleSharpnessRangeVal.isIntArray()) {
                                    temp.creativeStyleSharpnessRange = creativeStyleSharpnessRangeVal.toJavaIntArray();
                                }
                                javaObject0[i] = temp;
                            }
                        }

                        callbacks.returnCb(
                            javaObject0);
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getSupportedCreativeStyle",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getSupportedExposureCompensation(
            final com.sony.scalar.webapi.service.camera.v1_2.exposurecompensation.GetSupportedExposureCompensationCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 3) {

                        callbacks.returnCb(
                            params.get(0).toJavaIntArray(),
                            params.get(1).toJavaIntArray(),
                            params.get(2).toJavaIntArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getSupportedExposureCompensation",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getSupportedExposureMode(
            final com.sony.scalar.webapi.service.camera.v1_2.exposuremode.GetSupportedExposureModeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getSupportedExposureMode",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getSupportedFNumber(
            final com.sony.scalar.webapi.service.camera.v1_2.fnumber.GetSupportedFNumberCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getSupportedFNumber",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getSupportedFocusMode(
            final com.sony.scalar.webapi.service.camera.v1_2.focusmode.GetSupportedFocusModeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getSupportedFocusMode",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getSupportedIsoNumber(
            final com.sony.scalar.webapi.service.camera.v1_2.isonumber.GetSupportedIsoNumberCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getSupportedIsoNumber",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getSupportedLiveviewSize(
            final com.sony.scalar.webapi.service.camera.v1_2.liveview.GetSupportedLiveviewSizeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getSupportedLiveviewSize",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getSupportedPictureEffect(
            final com.sony.scalar.webapi.service.camera.v1_2.pictureeffect.GetSupportedPictureEffectCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {
                        com.sony.scalar.webapi.service.camera.v1_2.common.struct.PictureEffectParamCandidate[] javaObject0 = null;
                        if (params.get(0) instanceof com.sony.mexi.json.JsArray) {
                            com.sony.mexi.json.JsArray jsArray0 = (com.sony.mexi.json.JsArray) params.get(0);
                            javaObject0 = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.PictureEffectParamCandidate[jsArray0.length()];
                            for (int i = 0; i < jsArray0.length(); i++) {
                                com.sony.scalar.webapi.service.camera.v1_2.common.struct.PictureEffectParamCandidate temp = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.PictureEffectParamCandidate();
                                com.sony.mexi.json.JsObject jsObject0 = (com.sony.mexi.json.JsObject) jsArray0.get(i);
                                com.sony.mexi.json.JsValue pictureEffectVal = jsObject0.get("pictureEffect");
                                if (pictureEffectVal != null && pictureEffectVal.isString()) {
                                    temp.pictureEffect = pictureEffectVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue pictureEffectOptionsVal = jsObject0.get("pictureEffectOptions");
                                if (pictureEffectOptionsVal != null && pictureEffectOptionsVal.isStringArray()) {
                                    temp.pictureEffectOptions = pictureEffectOptionsVal.toJavaStringArray();
                                }
                                javaObject0[i] = temp;
                            }
                        }

                        callbacks.returnCb(
                            javaObject0);
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getSupportedPictureEffect",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getSupportedPostviewImageSize(
            final com.sony.scalar.webapi.service.camera.v1_2.postviewimage.GetSupportedPostviewImageSizeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getSupportedPostviewImageSize",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getSupportedProgramShift(
            final com.sony.scalar.webapi.service.camera.v1_2.programshift.GetSupportedProgramShiftCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaIntArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getSupportedProgramShift",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getSupportedSelfTimer(
            final com.sony.scalar.webapi.service.camera.v1_2.selftimer.GetSupportedSelfTimerCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaIntArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getSupportedSelfTimer",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getSupportedShutterSpeed(
            final com.sony.scalar.webapi.service.camera.v1_2.shutterspeed.GetSupportedShutterSpeedCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaStringArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getSupportedShutterSpeed",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getSupportedWhiteBalance(
            final com.sony.scalar.webapi.service.camera.v1_2.whitebalance.GetSupportedWhiteBalanceCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {
                        com.sony.scalar.webapi.service.camera.v1_2.common.struct.WhiteBalanceParamCandidate[] javaObject0 = null;
                        if (params.get(0) instanceof com.sony.mexi.json.JsArray) {
                            com.sony.mexi.json.JsArray jsArray0 = (com.sony.mexi.json.JsArray) params.get(0);
                            javaObject0 = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.WhiteBalanceParamCandidate[jsArray0.length()];
                            for (int i = 0; i < jsArray0.length(); i++) {
                                com.sony.scalar.webapi.service.camera.v1_2.common.struct.WhiteBalanceParamCandidate temp = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.WhiteBalanceParamCandidate();
                                com.sony.mexi.json.JsObject jsObject0 = (com.sony.mexi.json.JsObject) jsArray0.get(i);
                                com.sony.mexi.json.JsValue whiteBalanceModeVal = jsObject0.get("whiteBalanceMode");
                                if (whiteBalanceModeVal != null && whiteBalanceModeVal.isString()) {
                                    temp.whiteBalanceMode = whiteBalanceModeVal.toJavaString();
                                }
                                com.sony.mexi.json.JsValue colorTemperatureRangeVal = jsObject0.get("colorTemperatureRange");
                                if (colorTemperatureRangeVal != null && colorTemperatureRangeVal.isIntArray()) {
                                    temp.colorTemperatureRange = colorTemperatureRangeVal.toJavaIntArray();
                                }
                                javaObject0[i] = temp;
                            }
                        }

                        callbacks.returnCb(
                            javaObject0);
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getSupportedWhiteBalance",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getTouchAFPosition(
            final com.sony.scalar.webapi.service.camera.v1_2.touchafposition.GetTouchAFPositionCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 2) {

                        callbacks.returnCb(
                            params.get(0).toJavaBoolean(),
                            params.get(1).toJavaDoubleArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getTouchAFPosition",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int getWhiteBalance(
            final com.sony.scalar.webapi.service.camera.v1_2.whitebalance.GetWhiteBalanceCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {
                        com.sony.scalar.webapi.service.camera.v1_2.common.struct.WhiteBalanceParams javaObject0 = null;
                        if (params.get(0) instanceof com.sony.mexi.json.JsObject) {
                            javaObject0 = new com.sony.scalar.webapi.service.camera.v1_2.common.struct.WhiteBalanceParams();
                            com.sony.mexi.json.JsObject jsObject0 = (com.sony.mexi.json.JsObject) params.get(0);
                            com.sony.mexi.json.JsValue whiteBalanceModeVal = jsObject0.get("whiteBalanceMode");
                            if (whiteBalanceModeVal != null && whiteBalanceModeVal.isString()) {
                                javaObject0.whiteBalanceMode = whiteBalanceModeVal.toJavaString();
                            }
                            com.sony.mexi.json.JsValue colorTemperatureVal = jsObject0.get("colorTemperature");
                            if (colorTemperatureVal != null && colorTemperatureVal.isInt()) {
                                javaObject0.colorTemperature = colorTemperatureVal.toJavaInt();
                            }
                        }

                        callbacks.returnCb(
                            javaObject0);
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "getWhiteBalance",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int setAELock(
            boolean aELock,
            final com.sony.scalar.webapi.service.camera.v1_2.aelock.SetAELockCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 0) {

                        callbacks.returnCb();
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsBoolean(aELock));

        e = client.call(
                "setAELock",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int setBracketShootMode(
            java.lang.String bracketShootMode,
            java.lang.String bracketShootModeOption,
            final com.sony.scalar.webapi.service.camera.v1_2.bracketshootmode.SetBracketShootModeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 0) {

                        callbacks.returnCb();
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsString(bracketShootMode));
        params.add(new com.sony.mexi.json.JsString(bracketShootModeOption));

        e = client.call(
                "setBracketShootMode",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int setCreativeStyle(
            java.lang.String creativeStyle,
            boolean optionEnabled,
            int creativeStyleContrast,
            int creativeStyleSaturation,
            int creativeStyleSharpness,
            final com.sony.scalar.webapi.service.camera.v1_2.creativestyle.SetCreativeStyleCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 0) {

                        callbacks.returnCb();
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsString(creativeStyle));
        params.add(new com.sony.mexi.json.JsBoolean(optionEnabled));
        params.add(new com.sony.mexi.json.JsNumber(creativeStyleContrast));
        params.add(new com.sony.mexi.json.JsNumber(creativeStyleSaturation));
        params.add(new com.sony.mexi.json.JsNumber(creativeStyleSharpness));

        e = client.call(
                "setCreativeStyle",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int setExposureCompensation(
            int exposureCompensation,
            final com.sony.scalar.webapi.service.camera.v1_2.exposurecompensation.SetExposureCompensationCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaInt());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsNumber(exposureCompensation));

        e = client.call(
                "setExposureCompensation",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int setExposureMode(
            java.lang.String exposureMode,
            final com.sony.scalar.webapi.service.camera.v1_2.exposuremode.SetExposureModeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 0) {

                        callbacks.returnCb();
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsString(exposureMode));

        e = client.call(
                "setExposureMode",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int setFNumber(
            java.lang.String fNumber,
            final com.sony.scalar.webapi.service.camera.v1_2.fnumber.SetFNumberCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 0) {

                        callbacks.returnCb();
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsString(fNumber));

        e = client.call(
                "setFNumber",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int setFocusMode(
            java.lang.String focusMode,
            final com.sony.scalar.webapi.service.camera.v1_2.focusmode.SetFocusModeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 0) {

                        callbacks.returnCb();
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsString(focusMode));

        e = client.call(
                "setFocusMode",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int setIsoNumber(
            java.lang.String iso,
            final com.sony.scalar.webapi.service.camera.v1_2.isonumber.SetIsoNumberCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 0) {

                        callbacks.returnCb();
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsString(iso));

        e = client.call(
                "setIsoNumber",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int setLiveviewSize(
            java.lang.String size,
            final com.sony.scalar.webapi.service.camera.v1_2.liveview.SetLiveviewSizeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 0) {

                        callbacks.returnCb();
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsString(size));

        e = client.call(
                "setLiveviewSize",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int setPictureEffect(
            java.lang.String pictureEffect,
            java.lang.String pictureEffectOption,
            final com.sony.scalar.webapi.service.camera.v1_2.pictureeffect.SetPictureEffectCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 0) {

                        callbacks.returnCb();
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsString(pictureEffect));
        params.add(new com.sony.mexi.json.JsString(pictureEffectOption));

        e = client.call(
                "setPictureEffect",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int setPostviewImageSize(
            java.lang.String size,
            final com.sony.scalar.webapi.service.camera.v1_2.postviewimage.SetPostviewImageSizeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 0) {

                        callbacks.returnCb();
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsString(size));

        e = client.call(
                "setPostviewImageSize",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int setProgramShift(
            int step,
            final com.sony.scalar.webapi.service.camera.v1_2.programshift.SetProgramShiftCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 0) {

                        callbacks.returnCb();
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsNumber(step));

        e = client.call(
                "setProgramShift",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int setSelfTimer(
            int selfTimer,
            final com.sony.scalar.webapi.service.camera.v1_2.selftimer.SetSelfTimerCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaInt());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsNumber(selfTimer));

        e = client.call(
                "setSelfTimer",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int setShutterSpeed(
            java.lang.String shutterSpeed,
            final com.sony.scalar.webapi.service.camera.v1_2.shutterspeed.SetShutterSpeedCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 0) {

                        callbacks.returnCb();
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsString(shutterSpeed));

        e = client.call(
                "setShutterSpeed",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int setTouchAFPosition(
            double x,
            double y,
            final com.sony.scalar.webapi.service.camera.v1_2.touchafposition.SetTouchAFPositionCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 5) {

                        callbacks.returnCb(
                            params.get(0).toJavaBoolean(),
                            params.get(1).toJavaString(),
                            params.get(2).toJavaDoubleArray(),
                            params.get(3).toJavaDoubleArray(),
                            params.get(4).toJavaDoubleArray());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsNumber(x));
        params.add(new com.sony.mexi.json.JsNumber(y));

        e = client.call(
                "setTouchAFPosition",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int setWhiteBalance(
            java.lang.String whiteBalanceMode,
            boolean colorTemperatureEnabled,
            int colorTemperature,
            final com.sony.scalar.webapi.service.camera.v1_2.whitebalance.SetWhiteBalanceCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 0) {

                        callbacks.returnCb();
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsString(whiteBalanceMode));
        params.add(new com.sony.mexi.json.JsBoolean(colorTemperatureEnabled));
        params.add(new com.sony.mexi.json.JsNumber(colorTemperature));

        e = client.call(
                "setWhiteBalance",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int startLiveview(
            final com.sony.scalar.webapi.service.camera.v1_2.liveview.StartLiveviewCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaString());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "startLiveview",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int startLiveviewWithSize(
            java.lang.String size,
            final com.sony.scalar.webapi.service.camera.v1_2.liveview.StartLiveviewCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaString());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();
        params.add(new com.sony.mexi.json.JsString(size));

        e = client.call(
                "startLiveviewWithSize",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int startRecMode(
            final com.sony.scalar.webapi.service.camera.v1_2.recmode.StartRecModeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaInt());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "startRecMode",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int stopLiveview(
            final com.sony.scalar.webapi.service.camera.v1_2.liveview.StopLiveviewCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaInt());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "stopLiveview",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

    @Override
    public int stopRecMode(
            final com.sony.scalar.webapi.service.camera.v1_2.recmode.StopRecModeCallback callbacks) {
        if (callbacks == null) {
            return com.sony.mexi.webapi.Status.ILLEGAL_ARGUMENT.toInt();
        }
        com.sony.mexi.webapi.Status e;
        String cbName = callbacks.getName();
        if (!client.contains(cbName + "#R")) {
            com.sony.mexi.json.JsFunction func = new com.sony.mexi.json.JsFunction() {
                private static final long serialVersionUID = 1L;

                @Override
                public com.sony.mexi.json.JsValue invoke(com.sony.mexi.json.JsArray params) {
                    if (params != null && params.length() == 1) {

                        callbacks.returnCb(
                            params.get(0).toJavaInt());
                    }
                    return com.sony.mexi.json.JsUndefined.getInstance();
                }
            };
            e = client.register(cbName + "#R", func);
            if (e != com.sony.mexi.webapi.Status.OK) {
                return e.toInt();
            }
        }
        e = client.registerStatusHandler(callbacks);
        if (e != com.sony.mexi.webapi.Status.OK) {
            return e.toInt();
        }
        com.sony.mexi.json.JsArray params = new com.sony.mexi.json.JsArray();

        e = client.call(
                "stopRecMode",
                params,
                callbacks.getTimeoutTime(),
                callbacks.getName() + "#R",
                callbacks.getName() + "#S");
        return e.toInt();
    }

}
