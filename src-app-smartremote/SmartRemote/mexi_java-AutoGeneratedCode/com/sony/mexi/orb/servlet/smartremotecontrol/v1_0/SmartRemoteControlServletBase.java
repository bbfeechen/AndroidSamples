/**
 * @file  SmartRemoteControlServletBase.java
 * @brief Generated by the com.sony.mexi.codegen.CodeGenerator java-service 3.0.13
 * @date  Tue Oct 29 15:08:16 JST 2013
 *
 * Copyright 2013 Sony Corporation
 */
package com.sony.mexi.orb.servlet.smartremotecontrol.v1_0;

import com.sony.mexi.webapi.Status;

public abstract class SmartRemoteControlServletBase
    extends com.sony.mexi.orb.servlet.OrbVersionBase
    implements com.sony.scalar.webapi.interfaces.server.smartremotecontrol.v1_0.SmartRemoteControl {

    private static final long serialVersionUID = 1L;

    public static final String SERVICE_NAME = "com.sony.scalar.webapi.interfaces.server.smartremotecontrol.v1_0.SmartRemoteControl";
    public static final String SERVICE_VERSION = "1.0";

    @Override
    public final String getServiceName() {
        return SERVICE_NAME;
    }

    @Override
    public final String getServiceVersion() {
        return SERVICE_VERSION;
    }

    private class GetAvailableExposureCompensationCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.exposurecompensation.GetAvailableExposureCompensationCallback {

        @Override
        public void returnCb(
            int currentExposureCompensation,
            int maxExposureCompensation,
            int minExposureCompensation,
            int stepIndexOfExposureCompensation
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(currentExposureCompensation));
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(maxExposureCompensation));
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(minExposureCompensation));
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(stepIndexOfExposureCompensation));
        }
    }

    private class GetExposureCompensationCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.exposurecompensation.GetExposureCompensationCallback {

        @Override
        public void returnCb(
            int exposureCompensation
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(exposureCompensation));
        }
    }

    private class GetSupportedExposureCompensationCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.exposurecompensation.GetSupportedExposureCompensationCallback {

        @Override
        public void returnCb(
            int[] maxExposureCompensations,
            int[] minExposureCompensations,
            int[] stepIndexesOfExposureCompensation
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(maxExposureCompensations == null ? null : new com.sony.mexi.json.JsArray(maxExposureCompensations));
            ((com.sony.mexi.json.JsArray) this.response).add(minExposureCompensations == null ? null : new com.sony.mexi.json.JsArray(minExposureCompensations));
            ((com.sony.mexi.json.JsArray) this.response).add(stepIndexesOfExposureCompensation == null ? null : new com.sony.mexi.json.JsArray(stepIndexesOfExposureCompensation));
        }
    }

    private class SetExposureCompensationCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.exposurecompensation.SetExposureCompensationCallback {

        @Override
        public void returnCb(
            int ret
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(ret));
        }
    }

    private class GetAvailableExposureModeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.exposuremode.GetAvailableExposureModeCallback {

        @Override
        public void returnCb(
            java.lang.String currentExposureMode,
            java.lang.String[] exposureModeCandidates
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(currentExposureMode == null ? null : new com.sony.mexi.json.JsString(currentExposureMode));
            ((com.sony.mexi.json.JsArray) this.response).add(exposureModeCandidates == null ? null : new com.sony.mexi.json.JsArray(exposureModeCandidates));
        }
    }

    private class GetExposureModeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.exposuremode.GetExposureModeCallback {

        @Override
        public void returnCb(
            java.lang.String currentExposureMode
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(currentExposureMode == null ? null : new com.sony.mexi.json.JsString(currentExposureMode));
        }
    }

    private class GetSupportedExposureModeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.exposuremode.GetSupportedExposureModeCallback {

        @Override
        public void returnCb(
            java.lang.String[] exposureModeCandidates
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(exposureModeCandidates == null ? null : new com.sony.mexi.json.JsArray(exposureModeCandidates));
        }
    }

    private class SetExposureModeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.exposuremode.SetExposureModeCallback {

        @Override
        public void returnCb(
            int ret
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(ret));
        }
    }

    private class GetAvailableFlashModeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.flashmode.GetAvailableFlashModeCallback {

        @Override
        public void returnCb(
            java.lang.String current,
            java.lang.String[] flash
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(current == null ? null : new com.sony.mexi.json.JsString(current));
            ((com.sony.mexi.json.JsArray) this.response).add(flash == null ? null : new com.sony.mexi.json.JsArray(flash));
        }
    }

    private class GetFlashModeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.flashmode.GetFlashModeCallback {

        @Override
        public void returnCb(
            java.lang.String flash
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(flash == null ? null : new com.sony.mexi.json.JsString(flash));
        }
    }

    private class GetSupportedFlashModeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.flashmode.GetSupportedFlashModeCallback {

        @Override
        public void returnCb(
            java.lang.String[] flash
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(flash == null ? null : new com.sony.mexi.json.JsArray(flash));
        }
    }

    private class SetFlashModeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.flashmode.SetFlashModeCallback {

        @Override
        public void returnCb(
            int ret
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(ret));
        }
    }

    private class GetAvailableFNumberCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.fnumber.GetAvailableFNumberCallback {

        @Override
        public void returnCb(
            java.lang.String currentFNumber,
            java.lang.String[] fNumberCandidates
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(currentFNumber == null ? null : new com.sony.mexi.json.JsString(currentFNumber));
            ((com.sony.mexi.json.JsArray) this.response).add(fNumberCandidates == null ? null : new com.sony.mexi.json.JsArray(fNumberCandidates));
        }
    }

    private class GetFNumberCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.fnumber.GetFNumberCallback {

        @Override
        public void returnCb(
            java.lang.String currentFNumber
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(currentFNumber == null ? null : new com.sony.mexi.json.JsString(currentFNumber));
        }
    }

    private class GetSupportedFNumberCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.fnumber.GetSupportedFNumberCallback {

        @Override
        public void returnCb(
            java.lang.String[] fNumberCandidates
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(fNumberCandidates == null ? null : new com.sony.mexi.json.JsArray(fNumberCandidates));
        }
    }

    private class SetFNumberCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.fnumber.SetFNumberCallback {

        @Override
        public void returnCb(
            int ret
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(ret));
        }
    }

    private class GetEventCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.getevent.GetEventCallback {

        @Override
        public void returnCb(
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventAvailableApiListParams availableApiList,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventCameraStatusParams cameraStatus,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventZoomInformationParams zoomInformation,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventLiveviewStatusParams liveviewStatus,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventLiveviewOrientationParams liveviewOrientation,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventTakePictureParams[] takePicture,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventContinuousErrorParams[] continuousError,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventTriggeredErrorParams triggeredError,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventSceneRecognitionParams sceneRecognition,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventFormatStatusParams formatStatus,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventStorageInformationParams[] storageInformation,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventBeepModeParams beepMode,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventCameraFunctionParams cameraFunction,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventMovieQualityParams movieQuality,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventStillSizeParams stillSize,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventCameraFunctionResultParams cameraFunctionResult,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventSteadyModeParams steadyMode,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventViewAngleParams viewAngle,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventExposureModeParams exposureMode,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventPostviewImageSizeParams postviewImageSize,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventSelfTimerParams selfTimer,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventShootModeParams shootMode,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventAELockParams aeLock,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventBracketShootModeParams bracketShootMode,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventCreativeStyleParams creativeStyle,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventExposureCompensationParams exposureCompensation,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventFlashModeParams flashMode,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventFNumberParams fNumber,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventFocusModeParams focusMode,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventIsoSpeedRateParams isoSpeedRate,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventPictureEffectParams pictureEffect,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventProgramShiftParams programShift,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventShutterSpeedParams shutterSpeed,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventWhiteBalanceParams whiteBalance,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.GetEventTouchAFPositionParams touchAFPosition
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(availableApiList == null ? null : new com.sony.mexi.json.JsObject(availableApiList));
            ((com.sony.mexi.json.JsArray) this.response).add(cameraStatus == null ? null : new com.sony.mexi.json.JsObject(cameraStatus));
            ((com.sony.mexi.json.JsArray) this.response).add(zoomInformation == null ? null : new com.sony.mexi.json.JsObject(zoomInformation));
            ((com.sony.mexi.json.JsArray) this.response).add(liveviewStatus == null ? null : new com.sony.mexi.json.JsObject(liveviewStatus));
            ((com.sony.mexi.json.JsArray) this.response).add(liveviewOrientation == null ? null : new com.sony.mexi.json.JsObject(liveviewOrientation));
            ((com.sony.mexi.json.JsArray) this.response).add(takePicture == null ? null : new com.sony.mexi.json.JsArray(takePicture));
            ((com.sony.mexi.json.JsArray) this.response).add(continuousError == null ? null : new com.sony.mexi.json.JsArray(continuousError));
            ((com.sony.mexi.json.JsArray) this.response).add(triggeredError == null ? null : new com.sony.mexi.json.JsObject(triggeredError));
            ((com.sony.mexi.json.JsArray) this.response).add(sceneRecognition == null ? null : new com.sony.mexi.json.JsObject(sceneRecognition));
            ((com.sony.mexi.json.JsArray) this.response).add(formatStatus == null ? null : new com.sony.mexi.json.JsObject(formatStatus));
            ((com.sony.mexi.json.JsArray) this.response).add(storageInformation == null ? null : new com.sony.mexi.json.JsArray(storageInformation));
            ((com.sony.mexi.json.JsArray) this.response).add(beepMode == null ? null : new com.sony.mexi.json.JsObject(beepMode));
            ((com.sony.mexi.json.JsArray) this.response).add(cameraFunction == null ? null : new com.sony.mexi.json.JsObject(cameraFunction));
            ((com.sony.mexi.json.JsArray) this.response).add(movieQuality == null ? null : new com.sony.mexi.json.JsObject(movieQuality));
            ((com.sony.mexi.json.JsArray) this.response).add(stillSize == null ? null : new com.sony.mexi.json.JsObject(stillSize));
            ((com.sony.mexi.json.JsArray) this.response).add(cameraFunctionResult == null ? null : new com.sony.mexi.json.JsObject(cameraFunctionResult));
            ((com.sony.mexi.json.JsArray) this.response).add(steadyMode == null ? null : new com.sony.mexi.json.JsObject(steadyMode));
            ((com.sony.mexi.json.JsArray) this.response).add(viewAngle == null ? null : new com.sony.mexi.json.JsObject(viewAngle));
            ((com.sony.mexi.json.JsArray) this.response).add(exposureMode == null ? null : new com.sony.mexi.json.JsObject(exposureMode));
            ((com.sony.mexi.json.JsArray) this.response).add(postviewImageSize == null ? null : new com.sony.mexi.json.JsObject(postviewImageSize));
            ((com.sony.mexi.json.JsArray) this.response).add(selfTimer == null ? null : new com.sony.mexi.json.JsObject(selfTimer));
            ((com.sony.mexi.json.JsArray) this.response).add(shootMode == null ? null : new com.sony.mexi.json.JsObject(shootMode));
            ((com.sony.mexi.json.JsArray) this.response).add(aeLock == null ? null : new com.sony.mexi.json.JsObject(aeLock));
            ((com.sony.mexi.json.JsArray) this.response).add(bracketShootMode == null ? null : new com.sony.mexi.json.JsObject(bracketShootMode));
            ((com.sony.mexi.json.JsArray) this.response).add(creativeStyle == null ? null : new com.sony.mexi.json.JsObject(creativeStyle));
            ((com.sony.mexi.json.JsArray) this.response).add(exposureCompensation == null ? null : new com.sony.mexi.json.JsObject(exposureCompensation));
            ((com.sony.mexi.json.JsArray) this.response).add(flashMode == null ? null : new com.sony.mexi.json.JsObject(flashMode));
            ((com.sony.mexi.json.JsArray) this.response).add(fNumber == null ? null : new com.sony.mexi.json.JsObject(fNumber));
            ((com.sony.mexi.json.JsArray) this.response).add(focusMode == null ? null : new com.sony.mexi.json.JsObject(focusMode));
            ((com.sony.mexi.json.JsArray) this.response).add(isoSpeedRate == null ? null : new com.sony.mexi.json.JsObject(isoSpeedRate));
            ((com.sony.mexi.json.JsArray) this.response).add(pictureEffect == null ? null : new com.sony.mexi.json.JsObject(pictureEffect));
            ((com.sony.mexi.json.JsArray) this.response).add(programShift == null ? null : new com.sony.mexi.json.JsObject(programShift));
            ((com.sony.mexi.json.JsArray) this.response).add(shutterSpeed == null ? null : new com.sony.mexi.json.JsObject(shutterSpeed));
            ((com.sony.mexi.json.JsArray) this.response).add(whiteBalance == null ? null : new com.sony.mexi.json.JsObject(whiteBalance));
            ((com.sony.mexi.json.JsArray) this.response).add(touchAFPosition == null ? null : new com.sony.mexi.json.JsObject(touchAFPosition));
        }
    }

    private class GetAvailableIsoSpeedRateCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.isospeedrate.GetAvailableIsoSpeedRateCallback {

        @Override
        public void returnCb(
            java.lang.String currentIso,
            java.lang.String[] isoCandidates
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(currentIso == null ? null : new com.sony.mexi.json.JsString(currentIso));
            ((com.sony.mexi.json.JsArray) this.response).add(isoCandidates == null ? null : new com.sony.mexi.json.JsArray(isoCandidates));
        }
    }

    private class GetIsoSpeedRateCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.isospeedrate.GetIsoSpeedRateCallback {

        @Override
        public void returnCb(
            java.lang.String currentIso
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(currentIso == null ? null : new com.sony.mexi.json.JsString(currentIso));
        }
    }

    private class GetSupportedIsoSpeedRateCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.isospeedrate.GetSupportedIsoSpeedRateCallback {

        @Override
        public void returnCb(
            java.lang.String[] isoCandidates
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(isoCandidates == null ? null : new com.sony.mexi.json.JsArray(isoCandidates));
        }
    }

    private class SetIsoSpeedRateCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.isospeedrate.SetIsoSpeedRateCallback {

        @Override
        public void returnCb(
            int ret
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(ret));
        }
    }

    private class GetAvailableLiveviewSizeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.liveview.GetAvailableLiveviewSizeCallback {

        @Override
        public void returnCb(
            java.lang.String size,
            java.lang.String[] candidates
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(size == null ? null : new com.sony.mexi.json.JsString(size));
            ((com.sony.mexi.json.JsArray) this.response).add(candidates == null ? null : new com.sony.mexi.json.JsArray(candidates));
        }
    }

    private class GetLiveviewSizeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.liveview.GetLiveviewSizeCallback {

        @Override
        public void returnCb(
            java.lang.String size
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(size == null ? null : new com.sony.mexi.json.JsString(size));
        }
    }

    private class GetSupportedLiveviewSizeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.liveview.GetSupportedLiveviewSizeCallback {

        @Override
        public void returnCb(
            java.lang.String[] candidates
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(candidates == null ? null : new com.sony.mexi.json.JsArray(candidates));
        }
    }

    private class StartLiveviewCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.liveview.StartLiveviewCallback {

        @Override
        public void returnCb(
            java.lang.String url
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(url == null ? null : new com.sony.mexi.json.JsString(url));
        }
    }

    private class StopLiveviewCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.liveview.StopLiveviewCallback {

        @Override
        public void returnCb(
            int ret
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(ret));
        }
    }

    private class GetApplicationInfoCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.misc.GetApplicationInfoCallback {

        @Override
        public void returnCb(
            java.lang.String name,
            java.lang.String version
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(name == null ? null : new com.sony.mexi.json.JsString(name));
            ((com.sony.mexi.json.JsArray) this.response).add(version == null ? null : new com.sony.mexi.json.JsString(version));
        }
    }

    private class GetAvailableApiListCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.misc.GetAvailableApiListCallback {

        @Override
        public void returnCb(
            java.lang.String[] names
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(names == null ? null : new com.sony.mexi.json.JsArray(names));
        }
    }

    private class GetAvailablePostviewImageSizeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.postviewimage.GetAvailablePostviewImageSizeCallback {

        @Override
        public void returnCb(
            java.lang.String size,
            java.lang.String[] candidates
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(size == null ? null : new com.sony.mexi.json.JsString(size));
            ((com.sony.mexi.json.JsArray) this.response).add(candidates == null ? null : new com.sony.mexi.json.JsArray(candidates));
        }
    }

    private class GetPostviewImageSizeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.postviewimage.GetPostviewImageSizeCallback {

        @Override
        public void returnCb(
            java.lang.String size
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(size == null ? null : new com.sony.mexi.json.JsString(size));
        }
    }

    private class GetSupportedPostviewImageSizeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.postviewimage.GetSupportedPostviewImageSizeCallback {

        @Override
        public void returnCb(
            java.lang.String[] candidates
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(candidates == null ? null : new com.sony.mexi.json.JsArray(candidates));
        }
    }

    private class SetPostviewImageSizeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.postviewimage.SetPostviewImageSizeCallback {

        @Override
        public void returnCb(
            int ret
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(ret));
        }
    }

    private class GetSupportedProgramShiftCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.programshift.GetSupportedProgramShiftCallback {

        @Override
        public void returnCb(
            int[] stepRange
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(stepRange == null ? null : new com.sony.mexi.json.JsArray(stepRange));
        }
    }

    private class SetProgramShiftCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.programshift.SetProgramShiftCallback {

        @Override
        public void returnCb(
            int ret
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(ret));
        }
    }

    private class StartRecModeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.recmode.StartRecModeCallback {

        @Override
        public void returnCb(
            int ret
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(ret));
        }
    }

    private class StopRecModeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.recmode.StopRecModeCallback {

        @Override
        public void returnCb(
            int ret
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(ret));
        }
    }

    private class GetAvailableSelfTimerCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.selftimer.GetAvailableSelfTimerCallback {

        @Override
        public void returnCb(
            int currentSelfTimer,
            int[] selfTimerCandidates
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(currentSelfTimer));
            ((com.sony.mexi.json.JsArray) this.response).add(selfTimerCandidates == null ? null : new com.sony.mexi.json.JsArray(selfTimerCandidates));
        }
    }

    private class GetSelfTimerCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.selftimer.GetSelfTimerCallback {

        @Override
        public void returnCb(
            int currentSelfTimer
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(currentSelfTimer));
        }
    }

    private class GetSupportedSelfTimerCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.selftimer.GetSupportedSelfTimerCallback {

        @Override
        public void returnCb(
            int[] selfTimerCandidates
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(selfTimerCandidates == null ? null : new com.sony.mexi.json.JsArray(selfTimerCandidates));
        }
    }

    private class SetSelfTimerCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.selftimer.SetSelfTimerCallback {

        @Override
        public void returnCb(
            int ret
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(ret));
        }
    }

    private class GetAvailableShootModeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.shootmode.GetAvailableShootModeCallback {

        @Override
        public void returnCb(
            java.lang.String current,
            java.lang.String[] mode
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(current == null ? null : new com.sony.mexi.json.JsString(current));
            ((com.sony.mexi.json.JsArray) this.response).add(mode == null ? null : new com.sony.mexi.json.JsArray(mode));
        }
    }

    private class GetShootModeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.shootmode.GetShootModeCallback {

        @Override
        public void returnCb(
            java.lang.String mode
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(mode == null ? null : new com.sony.mexi.json.JsString(mode));
        }
    }

    private class GetSupportedShootModeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.shootmode.GetSupportedShootModeCallback {

        @Override
        public void returnCb(
            java.lang.String[] mode
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(mode == null ? null : new com.sony.mexi.json.JsArray(mode));
        }
    }

    private class SetShootModeCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.shootmode.SetShootModeCallback {

        @Override
        public void returnCb(
            int ret
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(ret));
        }
    }

    private class GetAvailableShutterSpeedCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.shutterspeed.GetAvailableShutterSpeedCallback {

        @Override
        public void returnCb(
            java.lang.String currentShutterSpeed,
            java.lang.String[] shutterSpeedCandidates
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(currentShutterSpeed == null ? null : new com.sony.mexi.json.JsString(currentShutterSpeed));
            ((com.sony.mexi.json.JsArray) this.response).add(shutterSpeedCandidates == null ? null : new com.sony.mexi.json.JsArray(shutterSpeedCandidates));
        }
    }

    private class GetShutterSpeedCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.shutterspeed.GetShutterSpeedCallback {

        @Override
        public void returnCb(
            java.lang.String currentShutterSpeed
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(currentShutterSpeed == null ? null : new com.sony.mexi.json.JsString(currentShutterSpeed));
        }
    }

    private class GetSupportedShutterSpeedCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.shutterspeed.GetSupportedShutterSpeedCallback {

        @Override
        public void returnCb(
            java.lang.String[] shutterSpeedCandidates
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(shutterSpeedCandidates == null ? null : new com.sony.mexi.json.JsArray(shutterSpeedCandidates));
        }
    }

    private class SetShutterSpeedCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.shutterspeed.SetShutterSpeedCallback {

        @Override
        public void returnCb(
            int ret
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(ret));
        }
    }

    private class ActTakePictureCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.takepicture.ActTakePictureCallback {

        @Override
        public void returnCb(
            java.lang.String[] url
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(url == null ? null : new com.sony.mexi.json.JsArray(url));
        }
    }

    private class AwaitTakePictureCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.takepicture.AwaitTakePictureCallback {

        @Override
        public void returnCb(
            java.lang.String[] url
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(url == null ? null : new com.sony.mexi.json.JsArray(url));
        }
    }

    private class CancelTouchAFPositionCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.touchafposition.CancelTouchAFPositionCallback {

        @Override
        public void returnCb(
        ) {
            this.response = new com.sony.mexi.json.JsArray();
        }
    }

    private class GetTouchAFPositionCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.touchafposition.GetTouchAFPositionCallback {

        @Override
        public void returnCb(
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.TouchAFCurrentPositionParams position
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(position == null ? null : new com.sony.mexi.json.JsObject(position));
        }
    }

    private class SetTouchAFPositionCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.touchafposition.SetTouchAFPositionCallback {

        @Override
        public void returnCb(
            int ret,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.TouchAFPositionParams position
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(ret));
            ((com.sony.mexi.json.JsArray) this.response).add(position == null ? null : new com.sony.mexi.json.JsObject(position));
        }
    }

    private class GetAvailableWhiteBalanceCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.whitebalance.GetAvailableWhiteBalanceCallback {

        @Override
        public void returnCb(
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.WhiteBalanceParams currentWhiteBalance,
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.WhiteBalanceParamCandidate[] whiteBalanceCandidates
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(currentWhiteBalance == null ? null : new com.sony.mexi.json.JsObject(currentWhiteBalance));
            ((com.sony.mexi.json.JsArray) this.response).add(whiteBalanceCandidates == null ? null : new com.sony.mexi.json.JsArray(whiteBalanceCandidates));
        }
    }

    private class GetSupportedWhiteBalanceCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.whitebalance.GetSupportedWhiteBalanceCallback {

        @Override
        public void returnCb(
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.WhiteBalanceParamCandidate[] whiteBalanceCandidates
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(whiteBalanceCandidates == null ? null : new com.sony.mexi.json.JsArray(whiteBalanceCandidates));
        }
    }

    private class GetWhiteBalanceCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.whitebalance.GetWhiteBalanceCallback {

        @Override
        public void returnCb(
            com.sony.scalar.webapi.service.camera.v1_0.common.struct.WhiteBalanceParams currentWhiteBalance
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(currentWhiteBalance == null ? null : new com.sony.mexi.json.JsObject(currentWhiteBalance));
        }
    }

    private class SetWhiteBalanceCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.whitebalance.SetWhiteBalanceCallback {

        @Override
        public void returnCb(
            int ret
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(ret));
        }
    }

    private class ActZoomCallbackImpl
        extends com.sony.mexi.orb.servlet.OrbClientCallbacks
        implements com.sony.scalar.webapi.service.camera.v1_0.zoom.ActZoomCallback {

        @Override
        public void returnCb(
            int ret
        ) {
            this.response = new com.sony.mexi.json.JsArray();
            ((com.sony.mexi.json.JsArray) this.response).add(new com.sony.mexi.json.JsNumber(ret));
        }
    }

    private class MethodActTakePicture extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                ActTakePictureCallbackImpl callbacks = new ActTakePictureCallbackImpl();

                actTakePicture(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodActZoom extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int"};
        }

        public final String[] parameterTypes() {
            return new String[] {"string", "string"};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 2
                    && params.get(0).isString()
                    && params.get(1).isString()
                ) {
                ActZoomCallbackImpl callbacks = new ActZoomCallbackImpl();

                actZoom(
                    params.get(0).toJavaString(),
                    params.get(1).toJavaString(),
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodAwaitTakePicture extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                AwaitTakePictureCallbackImpl callbacks = new AwaitTakePictureCallbackImpl();

                awaitTakePicture(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodCancelTouchAFPosition extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                CancelTouchAFPositionCallbackImpl callbacks = new CancelTouchAFPositionCallbackImpl();

                cancelTouchAFPosition(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetApplicationInfo extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string", "string"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetApplicationInfoCallbackImpl callbacks = new GetApplicationInfoCallbackImpl();

                getApplicationInfo(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetAvailableApiList extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetAvailableApiListCallbackImpl callbacks = new GetAvailableApiListCallbackImpl();

                getAvailableApiList(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetAvailableExposureCompensation extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int", "int", "int", "int"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetAvailableExposureCompensationCallbackImpl callbacks = new GetAvailableExposureCompensationCallbackImpl();

                getAvailableExposureCompensation(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetAvailableExposureMode extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string", "string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetAvailableExposureModeCallbackImpl callbacks = new GetAvailableExposureModeCallbackImpl();

                getAvailableExposureMode(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetAvailableFlashMode extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string", "string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetAvailableFlashModeCallbackImpl callbacks = new GetAvailableFlashModeCallbackImpl();

                getAvailableFlashMode(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetAvailableFNumber extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string", "string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetAvailableFNumberCallbackImpl callbacks = new GetAvailableFNumberCallbackImpl();

                getAvailableFNumber(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetAvailableIsoSpeedRate extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string", "string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetAvailableIsoSpeedRateCallbackImpl callbacks = new GetAvailableIsoSpeedRateCallbackImpl();

                getAvailableIsoSpeedRate(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetAvailableLiveviewSize extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string", "string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetAvailableLiveviewSizeCallbackImpl callbacks = new GetAvailableLiveviewSizeCallbackImpl();

                getAvailableLiveviewSize(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetAvailablePostviewImageSize extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string", "string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetAvailablePostviewImageSizeCallbackImpl callbacks = new GetAvailablePostviewImageSizeCallbackImpl();

                getAvailablePostviewImageSize(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetAvailableSelfTimer extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int", "int*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetAvailableSelfTimerCallbackImpl callbacks = new GetAvailableSelfTimerCallbackImpl();

                getAvailableSelfTimer(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetAvailableShootMode extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string", "string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetAvailableShootModeCallbackImpl callbacks = new GetAvailableShootModeCallbackImpl();

                getAvailableShootMode(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetAvailableShutterSpeed extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string", "string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetAvailableShutterSpeedCallbackImpl callbacks = new GetAvailableShutterSpeedCallbackImpl();

                getAvailableShutterSpeed(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetAvailableWhiteBalance extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"{\"whiteBalanceMode\":\"string\", \"colorTemperature\":\"int\"}", "{\"whiteBalanceMode\":\"string\", \"colorTemperatureRange\":\"int*\"}*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetAvailableWhiteBalanceCallbackImpl callbacks = new GetAvailableWhiteBalanceCallbackImpl();

                getAvailableWhiteBalance(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetEvent extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"{\"type\":\"string\", \"names\":\"string*\"}", "{\"type\":\"string\", \"cameraStatus\":\"string\"}", "{\"type\":\"string\", \"zoomPosition\":\"int\", \"zoomNumberBox\":\"int\", \"zoomIndexCurrentBox\":\"int\", \"zoomPositionCurrentBox\":\"int\"}", "{\"type\":\"string\", \"liveviewStatus\":\"bool\"}", "{\"type\":\"string\", \"liveviewOrientation\":\"string\"}", "{\"type\":\"string\", \"takePictureUrl\":\"string*\"}*", "{\"type\":\"string\", \"continuousError\":\"string\", \"isContinued\":\"bool\"}*", "{\"type\":\"string\", \"triggeredError\":\"string*\"}", "{\"type\":\"string\", \"sceneRecognition\":\"string\", \"steadyRecognition\":\"string\", \"motionRecognition\":\"string\"}", "{\"type\":\"string\", \"formatResult\":\"string\"}", "{\"type\":\"string\", \"storageID\":\"string\", \"recordTarget\":\"bool\", \"numberOfRecordableImages\":\"int\", \"recordableTime\":\"int\", \"storageDescription\":\"string\"}*", "{\"type\":\"string\", \"currentBeepMode\":\"string\", \"beepModeCandidates\":\"string*\"}", "{\"type\":\"string\", \"currentCameraFunction\":\"string\", \"cameraFunctionCandidates\":\"string*\"}", "{\"type\":\"string\", \"currentMovieQuality\":\"string\", \"movieQualityCandidates\":\"string*\"}", "{\"type\":\"string\", \"checkAvailability\":\"bool\", \"currentAspect\":\"string\", \"currentSize\":\"string\"}", "{\"type\":\"string\", \"cameraFunctionResult\":\"string\"}", "{\"type\":\"string\", \"currentSteadyMode\":\"string\", \"steadyModeCandidates\":\"string*\"}", "{\"type\":\"string\", \"currentViewAngle\":\"int\", \"viewAngleCandidates\":\"int*\"}", "{\"type\":\"string\", \"currentExposureMode\":\"string\", \"exposureModeCandidates\":\"string*\"}", "{\"type\":\"string\", \"currentPostviewImageSize\":\"string\", \"postviewImageSizeCandidates\":\"string*\"}", "{\"type\":\"string\", \"currentSelfTimer\":\"int\", \"selfTimerCandidates\":\"int*\"}", "{\"type\":\"string\", \"currentShootMode\":\"string\", \"shootModeCandidates\":\"string*\"}", "{\"type\":\"string\", \"currentAELock\":\"bool\", \"aeLockCandidates\":\"bool*\"}", "{\"type\":\"string\", \"checkAvailability\":\"bool\", \"currentBracketShootMode\":\"string\", \"currentBracketShootModeOption\":\"string\"}", "{\"type\":\"string\", \"checkAvailability\":\"bool\", \"currentCreativeStyle\":\"string\", \"currentCreativeStyleContrast\":\"int\", \"currentCreativeStyleSaturation\":\"int\", \"currentCreativeStyleSharpness\":\"int\"}", "{\"type\":\"string\", \"currentExposureCompensation\":\"int\", \"maxExposureCompensation\":\"int\", \"minExposureCompensation\":\"int\", \"stepIndexOfExposureCompensation\":\"int\"}", "{\"type\":\"string\", \"currentFlashMode\":\"string\", \"flashModeCandidates\":\"string*\"}", "{\"type\":\"string\", \"currentFNumber\":\"string\", \"fNumberCandidates\":\"string*\"}", "{\"type\":\"string\", \"currentFocusMode\":\"string\", \"focusModeCandidates\":\"string*\"}", "{\"type\":\"string\", \"currentIsoSpeedRate\":\"string\", \"isoSpeedRateCandidates\":\"string*\"}", "{\"type\":\"string\", \"checkAvailability\":\"bool\", \"currentPictureEffect\":\"string\", \"currentPictureEffectOption\":\"string\"}", "{\"type\":\"string\", \"isShifted\":\"bool\"}", "{\"type\":\"string\", \"currentShutterSpeed\":\"string\", \"shutterSpeedCandidates\":\"string*\"}", "{\"type\":\"string\", \"checkAvailability\":\"bool\", \"currentWhiteBalanceMode\":\"string\", \"currentColorTemperature\":\"int\"}", "{\"type\":\"string\", \"currentSet\":\"bool\", \"currentTouchCoordinates\":\"double*\"}"};
        }

        public final String[] parameterTypes() {
            return new String[] {"bool"};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 1
                    && params.get(0).isBoolean()
                ) {
                GetEventCallbackImpl callbacks = new GetEventCallbackImpl();

                getEvent(
                    params.get(0).toJavaBoolean(),
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetExposureCompensation extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetExposureCompensationCallbackImpl callbacks = new GetExposureCompensationCallbackImpl();

                getExposureCompensation(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetExposureMode extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetExposureModeCallbackImpl callbacks = new GetExposureModeCallbackImpl();

                getExposureMode(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetFlashMode extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetFlashModeCallbackImpl callbacks = new GetFlashModeCallbackImpl();

                getFlashMode(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetFNumber extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetFNumberCallbackImpl callbacks = new GetFNumberCallbackImpl();

                getFNumber(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetIsoSpeedRate extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetIsoSpeedRateCallbackImpl callbacks = new GetIsoSpeedRateCallbackImpl();

                getIsoSpeedRate(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetLiveviewSize extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetLiveviewSizeCallbackImpl callbacks = new GetLiveviewSizeCallbackImpl();

                getLiveviewSize(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetPostviewImageSize extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetPostviewImageSizeCallbackImpl callbacks = new GetPostviewImageSizeCallbackImpl();

                getPostviewImageSize(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetSelfTimer extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetSelfTimerCallbackImpl callbacks = new GetSelfTimerCallbackImpl();

                getSelfTimer(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetShootMode extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetShootModeCallbackImpl callbacks = new GetShootModeCallbackImpl();

                getShootMode(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetShutterSpeed extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetShutterSpeedCallbackImpl callbacks = new GetShutterSpeedCallbackImpl();

                getShutterSpeed(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetSupportedExposureCompensation extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int*", "int*", "int*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetSupportedExposureCompensationCallbackImpl callbacks = new GetSupportedExposureCompensationCallbackImpl();

                getSupportedExposureCompensation(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetSupportedExposureMode extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetSupportedExposureModeCallbackImpl callbacks = new GetSupportedExposureModeCallbackImpl();

                getSupportedExposureMode(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetSupportedFlashMode extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetSupportedFlashModeCallbackImpl callbacks = new GetSupportedFlashModeCallbackImpl();

                getSupportedFlashMode(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetSupportedFNumber extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetSupportedFNumberCallbackImpl callbacks = new GetSupportedFNumberCallbackImpl();

                getSupportedFNumber(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetSupportedIsoSpeedRate extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetSupportedIsoSpeedRateCallbackImpl callbacks = new GetSupportedIsoSpeedRateCallbackImpl();

                getSupportedIsoSpeedRate(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetSupportedLiveviewSize extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetSupportedLiveviewSizeCallbackImpl callbacks = new GetSupportedLiveviewSizeCallbackImpl();

                getSupportedLiveviewSize(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetSupportedPostviewImageSize extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetSupportedPostviewImageSizeCallbackImpl callbacks = new GetSupportedPostviewImageSizeCallbackImpl();

                getSupportedPostviewImageSize(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetSupportedProgramShift extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetSupportedProgramShiftCallbackImpl callbacks = new GetSupportedProgramShiftCallbackImpl();

                getSupportedProgramShift(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetSupportedSelfTimer extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetSupportedSelfTimerCallbackImpl callbacks = new GetSupportedSelfTimerCallbackImpl();

                getSupportedSelfTimer(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetSupportedShootMode extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetSupportedShootModeCallbackImpl callbacks = new GetSupportedShootModeCallbackImpl();

                getSupportedShootMode(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetSupportedShutterSpeed extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetSupportedShutterSpeedCallbackImpl callbacks = new GetSupportedShutterSpeedCallbackImpl();

                getSupportedShutterSpeed(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetSupportedWhiteBalance extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"{\"whiteBalanceMode\":\"string\", \"colorTemperatureRange\":\"int*\"}*"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetSupportedWhiteBalanceCallbackImpl callbacks = new GetSupportedWhiteBalanceCallbackImpl();

                getSupportedWhiteBalance(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetTouchAFPosition extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"{\"set\":\"bool\", \"touchCoordinates\":\"double*\"}"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetTouchAFPositionCallbackImpl callbacks = new GetTouchAFPositionCallbackImpl();

                getTouchAFPosition(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodGetWhiteBalance extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"{\"whiteBalanceMode\":\"string\", \"colorTemperature\":\"int\"}"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                GetWhiteBalanceCallbackImpl callbacks = new GetWhiteBalanceCallbackImpl();

                getWhiteBalance(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodSetExposureCompensation extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int"};
        }

        public final String[] parameterTypes() {
            return new String[] {"int"};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 1
                    && params.get(0).isInt()
                ) {
                SetExposureCompensationCallbackImpl callbacks = new SetExposureCompensationCallbackImpl();

                setExposureCompensation(
                    params.get(0).toJavaInt(),
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodSetExposureMode extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int"};
        }

        public final String[] parameterTypes() {
            return new String[] {"string"};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 1
                    && params.get(0).isString()
                ) {
                SetExposureModeCallbackImpl callbacks = new SetExposureModeCallbackImpl();

                setExposureMode(
                    params.get(0).toJavaString(),
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodSetFlashMode extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int"};
        }

        public final String[] parameterTypes() {
            return new String[] {"string"};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 1
                    && params.get(0).isString()
                ) {
                SetFlashModeCallbackImpl callbacks = new SetFlashModeCallbackImpl();

                setFlashMode(
                    params.get(0).toJavaString(),
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodSetFNumber extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int"};
        }

        public final String[] parameterTypes() {
            return new String[] {"string"};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 1
                    && params.get(0).isString()
                ) {
                SetFNumberCallbackImpl callbacks = new SetFNumberCallbackImpl();

                setFNumber(
                    params.get(0).toJavaString(),
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodSetIsoSpeedRate extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int"};
        }

        public final String[] parameterTypes() {
            return new String[] {"string"};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 1
                    && params.get(0).isString()
                ) {
                SetIsoSpeedRateCallbackImpl callbacks = new SetIsoSpeedRateCallbackImpl();

                setIsoSpeedRate(
                    params.get(0).toJavaString(),
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodSetPostviewImageSize extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int"};
        }

        public final String[] parameterTypes() {
            return new String[] {"string"};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 1
                    && params.get(0).isString()
                ) {
                SetPostviewImageSizeCallbackImpl callbacks = new SetPostviewImageSizeCallbackImpl();

                setPostviewImageSize(
                    params.get(0).toJavaString(),
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodSetProgramShift extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int"};
        }

        public final String[] parameterTypes() {
            return new String[] {"int"};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 1
                    && params.get(0).isInt()
                ) {
                SetProgramShiftCallbackImpl callbacks = new SetProgramShiftCallbackImpl();

                setProgramShift(
                    params.get(0).toJavaInt(),
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodSetSelfTimer extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int"};
        }

        public final String[] parameterTypes() {
            return new String[] {"int"};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 1
                    && params.get(0).isInt()
                ) {
                SetSelfTimerCallbackImpl callbacks = new SetSelfTimerCallbackImpl();

                setSelfTimer(
                    params.get(0).toJavaInt(),
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodSetShootMode extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int"};
        }

        public final String[] parameterTypes() {
            return new String[] {"string"};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 1
                    && params.get(0).isString()
                ) {
                SetShootModeCallbackImpl callbacks = new SetShootModeCallbackImpl();

                setShootMode(
                    params.get(0).toJavaString(),
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodSetShutterSpeed extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int"};
        }

        public final String[] parameterTypes() {
            return new String[] {"string"};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 1
                    && params.get(0).isString()
                ) {
                SetShutterSpeedCallbackImpl callbacks = new SetShutterSpeedCallbackImpl();

                setShutterSpeed(
                    params.get(0).toJavaString(),
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodSetTouchAFPosition extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int", "{\"AFResult\":\"bool\", \"AFType\":\"string\"}"};
        }

        public final String[] parameterTypes() {
            return new String[] {"double", "double"};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 2
                    && params.get(0).isDouble()
                    && params.get(1).isDouble()
                ) {
                SetTouchAFPositionCallbackImpl callbacks = new SetTouchAFPositionCallbackImpl();

                setTouchAFPosition(
                    params.get(0).toJavaDouble(),
                    params.get(1).toJavaDouble(),
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodSetWhiteBalance extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int"};
        }

        public final String[] parameterTypes() {
            return new String[] {"string", "bool", "int"};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 3
                    && params.get(0).isString()
                    && params.get(1).isBoolean()
                    && params.get(2).isInt()
                ) {
                SetWhiteBalanceCallbackImpl callbacks = new SetWhiteBalanceCallbackImpl();

                setWhiteBalance(
                    params.get(0).toJavaString(),
                    params.get(1).toJavaBoolean(),
                    params.get(2).toJavaInt(),
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodStartLiveview extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                StartLiveviewCallbackImpl callbacks = new StartLiveviewCallbackImpl();

                startLiveview(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodStartLiveviewWithSize extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"string"};
        }

        public final String[] parameterTypes() {
            return new String[] {"string"};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 1
                    && params.get(0).isString()
                ) {
                StartLiveviewCallbackImpl callbacks = new StartLiveviewCallbackImpl();

                startLiveviewWithSize(
                    params.get(0).toJavaString(),
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodStartRecMode extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                StartRecModeCallbackImpl callbacks = new StartRecModeCallbackImpl();

                startRecMode(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodStopLiveview extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                StopLiveviewCallbackImpl callbacks = new StopLiveviewCallbackImpl();

                stopLiveview(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    private class MethodStopRecMode extends com.sony.mexi.orb.servlet.OrbMethod {

        private static final long serialVersionUID = 1L;

        public final String[] resultTypes() {
            return new String[] {"int"};
        }

        public final String[] parameterTypes() {
            return new String[] {};
        }

        @Override
        public com.sony.mexi.json.JsValue invoke(javax.servlet.http.HttpServletRequest req,
                javax.servlet.http.HttpServletResponse res, com.sony.mexi.json.JsArray params) {
            if (params.length() == 0
                ) {
                StopRecModeCallbackImpl callbacks = new StopRecModeCallbackImpl();

                stopRecMode(
                    callbacks
                );
                com.sony.mexi.json.JsValue result = callbacks.getServerResponse();
                if (result != null) {
                    return result;
                } else {
                    return new com.sony.mexi.json.JsError(Status.UNSUPPORTED_OPERATION.toInt(), "no result");
                }
            } else {
                return new com.sony.mexi.json.JsError(Status.ILLEGAL_ARGUMENT.toInt(), "illegal argument");
            }
        }
    }

    public final void init(com.sony.mexi.orb.servlet.OrbMethodInvoker servlet) {
        addMethod("actTakePicture", new MethodActTakePicture(), servlet, false);
        addMethod("actZoom", new MethodActZoom(), servlet, false);
        addMethod("awaitTakePicture", new MethodAwaitTakePicture(), servlet, false);
        addMethod("cancelTouchAFPosition", new MethodCancelTouchAFPosition(), servlet, false);
        addMethod("getApplicationInfo", new MethodGetApplicationInfo(), servlet, false);
        addMethod("getAvailableApiList", new MethodGetAvailableApiList(), servlet, false);
        addMethod("getAvailableExposureCompensation", new MethodGetAvailableExposureCompensation(), servlet, false);
        addMethod("getAvailableExposureMode", new MethodGetAvailableExposureMode(), servlet, false);
        addMethod("getAvailableFlashMode", new MethodGetAvailableFlashMode(), servlet, false);
        addMethod("getAvailableFNumber", new MethodGetAvailableFNumber(), servlet, false);
        addMethod("getAvailableIsoSpeedRate", new MethodGetAvailableIsoSpeedRate(), servlet, false);
        addMethod("getAvailableLiveviewSize", new MethodGetAvailableLiveviewSize(), servlet, false);
        addMethod("getAvailablePostviewImageSize", new MethodGetAvailablePostviewImageSize(), servlet, false);
        addMethod("getAvailableSelfTimer", new MethodGetAvailableSelfTimer(), servlet, false);
        addMethod("getAvailableShootMode", new MethodGetAvailableShootMode(), servlet, false);
        addMethod("getAvailableShutterSpeed", new MethodGetAvailableShutterSpeed(), servlet, false);
        addMethod("getAvailableWhiteBalance", new MethodGetAvailableWhiteBalance(), servlet, false);
        addMethod("getEvent", new MethodGetEvent(), servlet, false);
        addMethod("getExposureCompensation", new MethodGetExposureCompensation(), servlet, false);
        addMethod("getExposureMode", new MethodGetExposureMode(), servlet, false);
        addMethod("getFlashMode", new MethodGetFlashMode(), servlet, false);
        addMethod("getFNumber", new MethodGetFNumber(), servlet, false);
        addMethod("getIsoSpeedRate", new MethodGetIsoSpeedRate(), servlet, false);
        addMethod("getLiveviewSize", new MethodGetLiveviewSize(), servlet, false);
        addMethod("getPostviewImageSize", new MethodGetPostviewImageSize(), servlet, false);
        addMethod("getSelfTimer", new MethodGetSelfTimer(), servlet, false);
        addMethod("getShootMode", new MethodGetShootMode(), servlet, false);
        addMethod("getShutterSpeed", new MethodGetShutterSpeed(), servlet, false);
        addMethod("getSupportedExposureCompensation", new MethodGetSupportedExposureCompensation(), servlet, false);
        addMethod("getSupportedExposureMode", new MethodGetSupportedExposureMode(), servlet, false);
        addMethod("getSupportedFlashMode", new MethodGetSupportedFlashMode(), servlet, false);
        addMethod("getSupportedFNumber", new MethodGetSupportedFNumber(), servlet, false);
        addMethod("getSupportedIsoSpeedRate", new MethodGetSupportedIsoSpeedRate(), servlet, false);
        addMethod("getSupportedLiveviewSize", new MethodGetSupportedLiveviewSize(), servlet, false);
        addMethod("getSupportedPostviewImageSize", new MethodGetSupportedPostviewImageSize(), servlet, false);
        addMethod("getSupportedProgramShift", new MethodGetSupportedProgramShift(), servlet, false);
        addMethod("getSupportedSelfTimer", new MethodGetSupportedSelfTimer(), servlet, false);
        addMethod("getSupportedShootMode", new MethodGetSupportedShootMode(), servlet, false);
        addMethod("getSupportedShutterSpeed", new MethodGetSupportedShutterSpeed(), servlet, false);
        addMethod("getSupportedWhiteBalance", new MethodGetSupportedWhiteBalance(), servlet, false);
        addMethod("getTouchAFPosition", new MethodGetTouchAFPosition(), servlet, false);
        addMethod("getWhiteBalance", new MethodGetWhiteBalance(), servlet, false);
        addMethod("setExposureCompensation", new MethodSetExposureCompensation(), servlet, false);
        addMethod("setExposureMode", new MethodSetExposureMode(), servlet, false);
        addMethod("setFlashMode", new MethodSetFlashMode(), servlet, false);
        addMethod("setFNumber", new MethodSetFNumber(), servlet, false);
        addMethod("setIsoSpeedRate", new MethodSetIsoSpeedRate(), servlet, false);
        addMethod("setPostviewImageSize", new MethodSetPostviewImageSize(), servlet, false);
        addMethod("setProgramShift", new MethodSetProgramShift(), servlet, false);
        addMethod("setSelfTimer", new MethodSetSelfTimer(), servlet, false);
        addMethod("setShootMode", new MethodSetShootMode(), servlet, false);
        addMethod("setShutterSpeed", new MethodSetShutterSpeed(), servlet, false);
        addMethod("setTouchAFPosition", new MethodSetTouchAFPosition(), servlet, false);
        addMethod("setWhiteBalance", new MethodSetWhiteBalance(), servlet, false);
        addMethod("startLiveview", new MethodStartLiveview(), servlet, false);
        addMethod("startLiveviewWithSize", new MethodStartLiveviewWithSize(), servlet, false);
        addMethod("startRecMode", new MethodStartRecMode(), servlet, false);
        addMethod("stopLiveview", new MethodStopLiveview(), servlet, false);
        addMethod("stopRecMode", new MethodStopRecMode(), servlet, false);
    }

}
